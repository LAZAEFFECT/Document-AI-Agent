{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyN8iVjj70c4HWR8kQ54k0jR",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/LAZAEFFECT/Document-AI-Agent/blob/main/app.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "id": "5fATePWY5kaT"
      },
      "outputs": [],
      "source": [
        "# === Install required libraries ===\n",
        "!pip install -q fpdf2 pydrive2 requests gspread oauth2client\n",
        "\n",
        "# === Imports ===\n",
        "import requests, os\n",
        "import gspread\n",
        "from oauth2client.service_account import ServiceAccountCredentials\n",
        "from google.colab import auth\n",
        "from pydrive2.auth import GoogleAuth\n",
        "from pydrive2.drive import GoogleDrive\n",
        "from fpdf import FPDF\n",
        "import smtplib\n",
        "from email.message import EmailMessage"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# === CONFIGURATION — fill these in yourself ASAP ===\n",
        "\n",
        "# Google Sheet URL\n",
        "SHEET_URL = \"https://docs.google.com/spreadsheets/d/18k4MQzKHYr_R_VIp7HhuGIN8djxQFGv0iArmSzUDfyE/edit\"\n",
        "\n",
        "# OpenRouter API Key\n",
        "OPENROUTER_API_KEY = \"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\"\n",
        "\n",
        "# Gmail credentials\n",
        "EMAIL_ADDRESS = \"luckythlongoane@gmail.com\"\n",
        "EMAIL_APP_PASSWORD = \"ayczxabgwxnbbkcr\"\n",
        "\n",
        "# Google Drive Folder ID\n",
        "TARGET_FOLDER_ID = \"1nJkFSXbM7WU3NB0yBpIjLITKXlLyB3PQ\""
      ],
      "metadata": {
        "id": "m2Qpf_PI57TG"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# === Read data from Google Sheet ===\n",
        "\n",
        "import gspread\n",
        "from google.colab import auth\n",
        "import google.auth\n",
        "from googleapiclient.discovery import build # Import build here\n",
        "from googleapiclient.http import MediaFileUpload # Import MediaFileUpload here\n",
        "import io # Import io here\n",
        "\n",
        "\n",
        "# Authenticate user\n",
        "auth.authenticate_user()\n",
        "\n",
        "# Get credentials using google.auth.default() and authorize gspread\n",
        "credentials, project_id = google.auth.default()\n",
        "gc = gspread.authorize(credentials)\n",
        "\n",
        "# Build the Google Drive service\n",
        "# The 'drive' object will be used for interacting with Google Drive\n",
        "drive = build('drive', 'v3', cache_discovery=False)\n",
        "print(\"✅ Google Drive authentication successful.\")\n",
        "\n",
        "\n",
        "# Open the spreadsheet and select the first worksheet\n",
        "spreadsheet = gc.open_by_url(SHEET_URL)\n",
        "worksheet = spreadsheet.sheet1\n",
        "\n",
        "# Get all records as a list of dictionaries\n",
        "data = worksheet.get_all_records()\n",
        "\n",
        "print(f\"✅ Successfully read {len(data)} rows from the Google Sheet.\")\n",
        "\n",
        "# Email function\n",
        "from email.message import EmailMessage\n",
        "import smtplib\n",
        "\n",
        "def send_email_pdf(to_email, client_name, filename):\n",
        "    msg = EmailMessage()\n",
        "    msg[\"From\"] = EMAIL_ADDRESS\n",
        "    msg[\"To\"] = to_email\n",
        "    msg[\"Subject\"] = f\"Your Document – {client_name}\"\n",
        "\n",
        "    # Use HTML for the email content\n",
        "    html_content = f\"\"\"\n",
        "    <html>\n",
        "    <body>\n",
        "        <p>Hi {client_name},</p>\n",
        "        <p>Please find your document attached.</p>\n",
        "        <p>Best,</p>\n",
        "        <p>Pretoria AI</p>\n",
        "    </body>\n",
        "    </html>\n",
        "    \"\"\"\n",
        "    msg.add_alternative(html_content, subtype='html') # Use add_alternative for HTML content\n",
        "\n",
        "    with open(filename, \"rb\") as f:\n",
        "        data = f.read()\n",
        "    msg.add_attachment(data, maintype=\"application\", subtype=\"pdf\", filename=filename)\n",
        "\n",
        "    try:\n",
        "        with smtplib.SMTP_SSL(\"smtp.gmail.com\", 465) as smtp:\n",
        "            smtp.login(EMAIL_ADDRESS, EMAIL_APP_PASSWORD)\n",
        "            smtp.send_message(msg)\n",
        "    except Exception as e:\n",
        "        print(f\"❌ Error sending email to {to_email} for {client_name}: {e}\")\n",
        "        # Do not re-raise, just log the error\n",
        "\n",
        "import requests\n",
        "from fpdf import FPDF\n",
        "import os # Import os to check for file existence\n",
        "\n",
        "# Define prompt templates for different request types\n",
        "# The key of the dictionary should match the value in the 'Request type' column of your Google Sheet (case-insensitive).\n",
        "# The value is the prompt template string, using curly braces {} to insert values from the corresponding row in the sheet.\n",
        "prompt_templates = {\n",
        "    \"invoice\": \"\"\"\n",
        "Generate a professional invoice.\n",
        "\n",
        "**Instructions:**\n",
        "1.  **Recipient:** The invoice is for **{Full Name}**. If a business name is provided ({  Business Name (optional)  }), use it as the primary recipient.\n",
        "2.  **Invoice Details:**\n",
        "    *   Create a unique **Invoice Number** (e.g., INV-001).\n",
        "    *   Use today's date as the **Invoice Date**.\n",
        "    *   Set **Payment Due** to \"Due upon receipt\" unless specified otherwise.\n",
        "3.  **Line Items:**\n",
        "    *   Analyze the **Description & Notes**: \"{Description & Notes}\" to extract services/products, quantities, and prices.\n",
        "    *   List each item clearly with its description, quantity, unit price, and total price.\n",
        "4.  **Calculations:**\n",
        "    *   Calculate the **Subtotal** from the line items.\n",
        "    *   If the description mentions a **discount**, apply it to the subtotal. Clearly state the discount percentage or amount.\n",
        "    *   If the description mentions **VAT** or \"tax,\" calculate it (use 15% if not specified) on the post-discount subtotal.\n",
        "    *   Calculate the final **Total Amount Due**.\n",
        "5.  **Formatting:**\n",
        "    *   The output must be clean, well-structured, and professional.\n",
        "    *   **Do NOT include any placeholders like \"[Your Business Name]\" or \"[Client Address]\". Only use the information provided.**\n",
        "    *   If a price is not mentioned, state \"Amount Due: To be discussed\".\n",
        "\"\"\",\n",
        "    \"contract\": \"\"\"\n",
        "Generate a professional service agreement.\n",
        "\n",
        "**Instructions:**\n",
        "1.  **Parties:** The agreement is between **{Full Name}** (the \"Client\") and the service provider. If a business name is provided ({  Business Name (optional)  }), use it for the Client.\n",
        "2.  **Agreement Details:**\n",
        "    *   Use today's date as the **Effective Date**.\n",
        "    *   The subject of the contract is based on the **Description & Notes**: \"{Description & Notes}\".\n",
        "3.  **Clauses to Include:**\n",
        "    *   **Services:** Clearly define the scope of work, deliverables, and timelines based on the description.\n",
        "    *   **Compensation:** Specify the payment terms, rates, and total fees. If the description includes pricing (e.g., \"R7000 per month\"), use that. Otherwise, state that compensation is \"as agreed upon separately.\"\n",
        "    *   **Term and Termination:** Define the start date and duration of the contract. Include a clause for termination by either party with written notice.\n",
        "    *   **Confidentiality:** Include a standard confidentiality clause to protect sensitive information.\n",
        "    *   **Governing Law:** State that the agreement is governed by the laws of the relevant jurisdiction (e.g., South Africa).\n",
        "4.  **Formatting:**\n",
        "    *   The output must be a formal, well-structured legal document.\n",
        "    *   Use clear headings for each section (e.g., \"1. Services\", \"2. Compensation\").\n",
        "    *   **Do NOT include placeholders like \"[Your Company Name]\" or \"[Client Signature]\". The document should be ready for signature.**\n",
        "    *   Include signature lines for both the Client and the service provider.\n",
        "\"\"\"\n",
        "}\n",
        "\n",
        "\n",
        "# Define the local path for the DejaVuSans font file\n",
        "dejavu_font_local_path = 'DejaVuSans.ttf'\n",
        "font_download_successful = False # Flag to track font download status\n",
        "\n",
        "# Check if the font file exists locally, if not, download it\n",
        "if not os.path.exists(dejavu_font_local_path):\n",
        "    print(\"Attempting to download DejaVuSans.ttf...\")\n",
        "    font_url = 'http://dejavu-fonts.org/files/dejavu-fonts-ttf-2.37.zip' # URL to DejaVu fonts zip\n",
        "    zip_path = 'dejavu_fonts.zip'\n",
        "    # Download the zip file\n",
        "    try:\n",
        "        response = requests.get(font_url, stream=True)\n",
        "        response.raise_for_status()\n",
        "        with open(zip_path, 'wb') as f:\n",
        "            for chunk in response.iter_content(chunk_size=8192):\n",
        "                f.write(chunk)\n",
        "        print(\"Download complete. Extracting font file...\")\n",
        "\n",
        "        # Extract DejaVuSans.ttf from the zip\n",
        "        import zipfile\n",
        "        with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n",
        "            # Assuming the font is in a specific path within the zip, e.g., dejavu-fonts-ttf-2.37/ttf/DejaVuSans.ttf\n",
        "            # You might need to adjust this path based on the zip file's structure\n",
        "            font_in_zip_path = 'dejavu-fonts-ttf-2.37/ttf/DejaVuSans.ttf' # Common path within the zip\n",
        "            if font_in_zip_path in zip_ref.namelist():\n",
        "                zip_ref.extract(font_in_zip_path, '.') # Extract to the current directory\n",
        "                # Move the extracted file to the desired local path\n",
        "                extracted_font_path = os.path.join('.', font_in_zip_path)\n",
        "                os.rename(extracted_font_path, dejavu_font_local_path)\n",
        "                print(f\"✅ Successfully extracted and moved {dejavu_font_local_path}\")\n",
        "                font_download_successful = True\n",
        "            else:\n",
        "                 print(f\"❌ Error: '{font_in_zip_path}' not found within the zip file.\")\n",
        "                 dejavu_font_local_path = None # Set to None if extraction fails\n",
        "                 font_download_successful = False\n",
        "\n",
        "\n",
        "    except requests.exceptions.RequestException as e:\n",
        "        print(f\"❌ Error downloading font file: {e}\")\n",
        "        print(\"Please check the font URL or try manually uploading 'DejaVuSans.ttf' to your environment.\")\n",
        "        dejavu_font_local_path = None # Set to None if download fails\n",
        "        font_download_successful = False\n",
        "    except zipfile.BadZipFile:\n",
        "        print(\"❌ Error: Downloaded file is not a valid zip file.\")\n",
        "        dejavu_font_local_path = None\n",
        "        font_download_successful = False\n",
        "    except Exception as e:\n",
        "        print(f\"❌ An unexpected error occurred during font setup: {e}\")\n",
        "        dejavu_font_local_path = None\n",
        "        font_download_successful = False\n",
        "else:\n",
        "    # Font file already exists locally\n",
        "    font_download_successful = True\n",
        "\n",
        "\n",
        "# Main process\n",
        "headers = {\"Authorization\": f\"Bearer {OPENROUTER_API_KEY}\"}\n",
        "for row in data:\n",
        "    client_name = row.get('Full Name', 'Unknown Client') # Default to 'Unknown Client' if name is missing\n",
        "    email = row.get(\"Client's Email\") or row.get(\"Email\")\n",
        "    if not email:\n",
        "        print(f\"Skipping processing for {client_name}: No email address provided in the Google Sheet.\")\n",
        "        continue\n",
        "\n",
        "    request_type = row.get('Request type', '').lower() # Get request type and convert to lowercase\n",
        "    prompt_template = prompt_templates.get(request_type) # Get the template for the request type\n",
        "\n",
        "    if prompt_template:\n",
        "        # Format the prompt using the template and row data\n",
        "        try:\n",
        "            prompt = prompt_template.format(**row)\n",
        "        except KeyError as e:\n",
        "            print(f\"❌ Skipping processing for {client_name}: Missing required data in the Google Sheet for the '{request_type}' template. Missing key: {e}\")\n",
        "            continue\n",
        "    else:\n",
        "        # Use a default prompt if no template is found\n",
        "        print(f\"ℹ️ No specific prompt template found for request type: '{row.get('Request type')}' for client {client_name}. Using a default prompt based on Description & Notes.\")\n",
        "        prompt = f\"Generate a document for {client_name}:\\n{row.get('Description & Notes', 'No description provided.')}\" # Default description if missing\n",
        "\n",
        "    # Print the prompt being sent to the API for debugging\n",
        "    print(f\"Prompt being sent to API for {client_name}: {prompt}\")\n",
        "\n",
        "    payload = {\"model\":\"mistralai/mistral-7b-instruct\", \"messages\":[{\"role\":\"user\",\"content\":prompt}]}\n",
        "\n",
        "    try:\n",
        "        resp = requests.post(\"https://openrouter.ai/api/v1/chat/completions\", headers=headers, json=payload)\n",
        "        resp.raise_for_status() # Raise an HTTPError for bad responses (4xx or 5xx)\n",
        "\n",
        "        # Print the full API response for debugging\n",
        "        # print(\"Full OpenRouter API Response:\") # Commented out to reduce noise, uncomment for detailed debugging\n",
        "        # print(resp.json())\n",
        "        # print(\"-\" * 20) # Separator for clarity\n",
        "\n",
        "\n",
        "        text = resp.json()[\"choices\"][0][\"message\"][\"content\"]\n",
        "\n",
        "        pdf = FPDF()\n",
        "        # Check if the font is available before attempting to add it\n",
        "        if font_download_successful and dejavu_font_local_path and os.path.exists(dejavu_font_local_path):\n",
        "            try:\n",
        "                pdf.add_font('DejaVuSans', '', dejavu_font_local_path, uni=True)\n",
        "                pdf.set_font(\"DejaVuSans\", size=12) # Set font only if found\n",
        "                print(f\"✅ Using DejaVuSans font for {client_name}'s PDF.\")\n",
        "            except Exception as font_error:\n",
        "                print(f\"❌ Error adding DejaVuSans font for {client_name}: {font_error}. Falling back to default font.\")\n",
        "                pdf.set_font(\"Arial\", size=12) # Fallback to Arial if DejaVuSans fails\n",
        "                # Attempt to handle potential encoding issues by replacing unsupported characters\n",
        "                text = text.encode('latin-1', 'replace').decode('latin-1')\n",
        "        else:\n",
        "            print(f\"⚠️ DejaVuSans font file not found or could not be loaded for {client_name}. Using default font. Unicode characters may not render correctly.\")\n",
        "            pdf.set_font(\"Arial\", size=12) # Fallback to Arial if DejaVuSans not found or unavailable\n",
        "            # Attempt to handle potential encoding issues by replacing unsupported characters\n",
        "            text = text.encode('latin-1', 'replace').decode('latin-1')\n",
        "\n",
        "\n",
        "        pdf.add_page()\n",
        "        # Add the entire text block as a single multi_cell\n",
        "        pdf.multi_cell(190, 8, text)\n",
        "        fname = f\"{client_name.replace(' ','_')}_{request_type}.pdf\"\n",
        "        pdf.output(fname)\n",
        "\n",
        "        # Use google-api-python-client to upload the file\n",
        "        file_metadata = {\n",
        "            'name': fname,\n",
        "            'parents': [TARGET_FOLDER_ID]\n",
        "        }\n",
        "        media = MediaFileUpload(fname, mimetype='application/pdf')\n",
        "        # Use the 'drive' object authenticated in cell 4d328115\n",
        "        file = drive.files().create(body=file_metadata, media_body=media, fields='id').execute()\n",
        "        print(f\"✅ Uploaded file '{fname}' to Google Drive with ID: {file.get('id')}\")\n",
        "\n",
        "\n",
        "        send_email_pdf(email, client_name, fname)\n",
        "        print(f\"✅ Processed & emailed: {client_name}\")\n",
        "\n",
        "    except requests.exceptions.RequestException as e:\n",
        "        print(f\"❌ Error calling OpenRouter API for {client_name}: {e}\")\n",
        "        print(\"Please check your API key, network connection, or the OpenRouter service status.\")\n",
        "        if hasattr(e, 'response') and e.response is not None:\n",
        "            print(f\"API Response status code: {e.response.status_code}\")\n",
        "            print(f\"API Response body: {e.response.text}\")\n",
        "        continue # Continue to the next row if there's an API error\n",
        "\n",
        "    except KeyError as e:\n",
        "        print(f\"❌ Error processing API response for {client_name}: The API response structure was unexpected. Missing key: {e}\")\n",
        "        print(\"This might be an issue with how the response is being parsed. Please check the API response structure.\")\n",
        "        # The full response is already printed above (if not commented out), which should help diagnose this KeyError\n",
        "        continue # Continue to the next row if there's a KeyError in processing the response\n",
        "    except Exception as e:\n",
        "        print(f\"❌ An unexpected error occurred while processing data for {client_name}: {e}\")\n",
        "        print(\"Please review the data for this row or the processing logic.\")\n",
        "        continue # Continue to the next row for any other unexpected error"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "71q0K61_E_lh",
        "outputId": "af81fe50-24cd-4275-e526-e4a401b18412"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Google Drive authentication successful.\n",
            "✅ Successfully read 3 rows from the Google Sheet.\n",
            "Attempting to download DejaVuSans.ttf...\n",
            "❌ Error downloading font file: 403 Client Error: Forbidden for url: http://dejavu-fonts.org/files/dejavu-fonts-ttf-2.37.zip\n",
            "Please check the font URL or try manually uploading 'DejaVuSans.ttf' to your environment.\n",
            "Prompt being sent to API for john Doe: \n",
            "Generate a professional invoice.\n",
            "\n",
            "**Instructions:**\n",
            "1.  **Recipient:** The invoice is for **john Doe**. If a business name is provided (laza effect), use it as the primary recipient.\n",
            "2.  **Invoice Details:**\n",
            "    *   Create a unique **Invoice Number** (e.g., INV-001).\n",
            "    *   Use today's date as the **Invoice Date**.\n",
            "    *   Set **Payment Due** to \"Due upon receipt\" unless specified otherwise.\n",
            "3.  **Line Items:**\n",
            "    *   Analyze the **Description & Notes**: \"\" to extract services/products, quantities, and prices.\n",
            "    *   List each item clearly with its description, quantity, unit price, and total price.\n",
            "4.  **Calculations:**\n",
            "    *   Calculate the **Subtotal** from the line items.\n",
            "    *   If the description mentions a **discount**, apply it to the subtotal. Clearly state the discount percentage or amount.\n",
            "    *   If the description mentions **VAT** or \"tax,\" calculate it (use 15% if not specified) on the post-discount subtotal.\n",
            "    *   Calculate the final **Total Amount Due**.\n",
            "5.  **Formatting:**\n",
            "    *   The output must be clean, well-structured, and professional.\n",
            "    *   **Do NOT include any placeholders like \"[Your Business Name]\" or \"[Client Address]\". Only use the information provided.**\n",
            "    *   If a price is not mentioned, state \"Amount Due: To be discussed\".\n",
            "\n",
            "⚠️ DejaVuSans font file not found or could not be loaded for john Doe. Using default font. Unicode characters may not render correctly.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-1598161489.py:231: DeprecationWarning: Substituting font arial by core font helvetica - This is deprecated since v2.7.8, and will soon be removed\n",
            "  pdf.set_font(\"Arial\", size=12) # Fallback to Arial if DejaVuSans not found or unavailable\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Uploaded file 'john_Doe_invoice.pdf' to Google Drive with ID: 1gqBft3NZ5AR6ZrkmOdRWtQCAjZsD8t2T\n",
            "✅ Processed & emailed: john Doe\n",
            "Prompt being sent to API for frans Letwaba: \n",
            "Generate a professional service agreement.\n",
            "\n",
            "**Instructions:**\n",
            "1.  **Parties:** The agreement is between **frans Letwaba** (the \"Client\") and the service provider. If a business name is provided (Academy city), use it for the Client.\n",
            "2.  **Agreement Details:**\n",
            "    *   Use today's date as the **Effective Date**.\n",
            "    *   The subject of the contract is based on the **Description & Notes**: \"\".\n",
            "3.  **Clauses to Include:**\n",
            "    *   **Services:** Clearly define the scope of work, deliverables, and timelines based on the description.\n",
            "    *   **Compensation:** Specify the payment terms, rates, and total fees. If the description includes pricing (e.g., \"R7000 per month\"), use that. Otherwise, state that compensation is \"as agreed upon separately.\"\n",
            "    *   **Term and Termination:** Define the start date and duration of the contract. Include a clause for termination by either party with written notice.\n",
            "    *   **Confidentiality:** Include a standard confidentiality clause to protect sensitive information.\n",
            "    *   **Governing Law:** State that the agreement is governed by the laws of the relevant jurisdiction (e.g., South Africa).\n",
            "4.  **Formatting:**\n",
            "    *   The output must be a formal, well-structured legal document.\n",
            "    *   Use clear headings for each section (e.g., \"1. Services\", \"2. Compensation\").\n",
            "    *   **Do NOT include placeholders like \"[Your Company Name]\" or \"[Client Signature]\". The document should be ready for signature.**\n",
            "    *   Include signature lines for both the Client and the service provider.\n",
            "\n",
            "⚠️ DejaVuSans font file not found or could not be loaded for frans Letwaba. Using default font. Unicode characters may not render correctly.\n",
            "✅ Uploaded file 'frans_Letwaba_contract.pdf' to Google Drive with ID: 1ElTsRmd0d_YPuSvna2XAXl9ZiIDKIbJF\n",
            "✅ Processed & emailed: frans Letwaba\n",
            "Prompt being sent to API for Khwinana Joseph: \n",
            "Generate a professional invoice.\n",
            "\n",
            "**Instructions:**\n",
            "1.  **Recipient:** The invoice is for **Khwinana Joseph**. If a business name is provided (Dutoit Store), use it as the primary recipient.\n",
            "2.  **Invoice Details:**\n",
            "    *   Create a unique **Invoice Number** (e.g., INV-001).\n",
            "    *   Use today's date as the **Invoice Date**.\n",
            "    *   Set **Payment Due** to \"Due upon receipt\" unless specified otherwise.\n",
            "3.  **Line Items:**\n",
            "    *   Analyze the **Description & Notes**: \"Create me an invoice for today using todays date which is 08/08/2025 for 20 computers that i am selling for R2000 each due date is 10/08/2025 and i am selling them to dutoit store, also include their business name and the name of my business which is laza effect,include business address,business name and client's email address on the columns\" to extract services/products, quantities, and prices.\n",
            "    *   List each item clearly with its description, quantity, unit price, and total price.\n",
            "4.  **Calculations:**\n",
            "    *   Calculate the **Subtotal** from the line items.\n",
            "    *   If the description mentions a **discount**, apply it to the subtotal. Clearly state the discount percentage or amount.\n",
            "    *   If the description mentions **VAT** or \"tax,\" calculate it (use 15% if not specified) on the post-discount subtotal.\n",
            "    *   Calculate the final **Total Amount Due**.\n",
            "5.  **Formatting:**\n",
            "    *   The output must be clean, well-structured, and professional.\n",
            "    *   **Do NOT include any placeholders like \"[Your Business Name]\" or \"[Client Address]\". Only use the information provided.**\n",
            "    *   If a price is not mentioned, state \"Amount Due: To be discussed\".\n",
            "\n",
            "⚠️ DejaVuSans font file not found or could not be loaded for Khwinana Joseph. Using default font. Unicode characters may not render correctly.\n",
            "✅ Uploaded file 'Khwinana_Joseph_invoice.pdf' to Google Drive with ID: 1diR1GovsV5wYbMxW0sEUPFZ60sVh71A-\n",
            "✅ Processed & emailed: Khwinana Joseph\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4d328115",
        "outputId": "6aa7f213-bf40-4e9e-a5d7-84b1c1bc65ae"
      },
      "source": [
        "from google.colab import auth\n",
        "from googleapiclient.discovery import build\n",
        "from googleapiclient.http import MediaFileUpload\n",
        "import io\n",
        "\n",
        "# Authenticate using Google Colab's built-in authentication\n",
        "auth.authenticate_user()\n",
        "\n",
        "# Build the Google Drive service\n",
        "# The 'drive' object will be used for interacting with Google Drive\n",
        "drive = build('drive', 'v3', cache_discovery=False)\n",
        "\n",
        "print(\"✅ Google Drive authentication successful using google-api-python-client.\")"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Google Drive authentication successful using google-api-python-client.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cde359c1",
        "outputId": "e9fe59e6-65c9-4fd0-89aa-3de1502a9961"
      },
      "source": [
        "# === Read data from Google Sheet ===\n",
        "\n",
        "import gspread\n",
        "from google.colab import auth\n",
        "import google.auth\n",
        "\n",
        "# Authenticate user\n",
        "auth.authenticate_user()\n",
        "\n",
        "# Get credentials using google.auth.default() and authorize gspread\n",
        "credentials, project_id = google.auth.default()\n",
        "gc = gspread.authorize(credentials)\n",
        "\n",
        "\n",
        "# Open the spreadsheet and select the first worksheet\n",
        "spreadsheet = gc.open_by_url(SHEET_URL)\n",
        "worksheet = spreadsheet.sheet1\n",
        "\n",
        "# Get all records as a list of dictionaries\n",
        "data = worksheet.get_all_records()\n",
        "\n",
        "print(f\"✅ Successfully read {len(data)} rows from the Google Sheet.\")"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Successfully read 3 rows from the Google Sheet.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a5992430",
        "outputId": "1be4292c-18cf-4180-d5d1-45dbc3378b9a"
      },
      "source": [
        "import requests\n",
        "import os\n",
        "\n",
        "# Assuming OPENROUTER_API_KEY is defined in a previous cell\n",
        "# from google.colab import userdata\n",
        "# OPENROUTER_API_KEY = userdata.get('OPENROUTER_API_KEY') # Uncomment and use if storing key in Colab secrets\n",
        "\n",
        "headers = {\n",
        "    \"Authorization\": f\"Bearer {OPENROUTER_API_KEY}\",\n",
        "}\n",
        "\n",
        "try:\n",
        "    # Making a simple API call to list models (requires authentication)\n",
        "    response = requests.get(\"https://openrouter.ai/api/v1/models\", headers=headers)\n",
        "    response.raise_for_status() # Raise an HTTPError for bad responses (4xx or 5xx)\n",
        "\n",
        "    print(\"✅ API Key seems correct and active. Received a valid response.\")\n",
        "    # Optionally, print part of the response to confirm\n",
        "    # print(response.json())\n",
        "\n",
        "except requests.exceptions.RequestException as e:\n",
        "    print(f\"❌ Error: Could not verify API key. Check the key and your network connection.\")\n",
        "    print(f\"Error details: {e}\")\n",
        "    if response is not None:\n",
        "        print(f\"API Response status code: {response.status_code}\")\n",
        "        print(f\"API Response body: {response.text}\")"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "❌ Error: Could not verify API key. Check the key and your network connection.\n",
            "Error details: 408 Client Error: Request Timeout for url: https://openrouter.ai/api/v1/models\n",
            "API Response status code: 408\n",
            "API Response body: {\"error\":{\"message\":\"Timed out. Please try again.\",\"code\":408}}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "d9a9fab4"
      },
      "source": [
        "# Task\n",
        "Provide guidance on how to package the Document Agent for free use by small businesses and suggest ways to enhance its capabilities, precision, and variety."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1c2c90dd"
      },
      "source": [
        "## Explore packaging options\n",
        "\n",
        "### Subtask:\n",
        "Research and evaluate different ways to package and share your Document Agent for free use by others, considering ease of use for non-technical users (e.g., sharing the notebook, creating a simple web app, using deployment platforms).\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f6559512"
      },
      "source": [
        "## Enhance prompt templates\n",
        "\n",
        "### Subtask:\n",
        "Refine the existing and create new, more detailed prompt templates in cell `71q0K61_E_lh` to improve the precision and variety of generated documents, ensuring they only include necessary information and follow professional formats.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "261ff761"
      },
      "source": [
        "**Reasoning**:\n",
        "I will refine the `prompt_templates` in cell `71q0K61_E_lh` by updating the \"invoice\" template to handle discounts and creating a new, detailed \"contract\" template. This will improve the quality and variety of the generated documents as requested.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1f655b79",
        "outputId": "687b79ee-6f03-4e87-ff5f-cbe4527a5f52"
      },
      "source": [
        "# === Read data from Google Sheet ===\n",
        "\n",
        "import gspread\n",
        "from google.colab import auth\n",
        "import google.auth\n",
        "\n",
        "# Authenticate user\n",
        "auth.authenticate_user()\n",
        "\n",
        "# Get credentials using google.auth.default() and authorize gspread\n",
        "credentials, project_id = google.auth.default()\n",
        "gc = gspread.authorize(credentials)\n",
        "\n",
        "\n",
        "# Open the spreadsheet and select the first worksheet\n",
        "spreadsheet = gc.open_by_url(SHEET_URL)\n",
        "worksheet = spreadsheet.sheet1\n",
        "\n",
        "# Get all records as a list of dictionaries\n",
        "data = worksheet.get_all_records()\n",
        "\n",
        "print(f\"✅ Successfully read {len(data)} rows from the Google Sheet.\")\n",
        "\n",
        "# Email function\n",
        "from email.message import EmailMessage\n",
        "import smtplib\n",
        "\n",
        "def send_email_pdf(to_email, client_name, filename):\n",
        "    msg = EmailMessage()\n",
        "    msg[\"From\"] = EMAIL_ADDRESS\n",
        "    msg[\"To\"] = to_email\n",
        "    msg[\"Subject\"] = f\"Your Document – {client_name}\"\n",
        "\n",
        "    # Use HTML for the email content\n",
        "    html_content = f\"\"\"\n",
        "    <html>\n",
        "    <body>\n",
        "        <p>Hi {client_name},</p>\n",
        "        <p>Please find your document attached.</p>\n",
        "        <p>Best,</p>\n",
        "        <p>Pretoria AI</p>\n",
        "    </body>\n",
        "    </html>\n",
        "    \"\"\"\n",
        "    msg.add_alternative(html_content, subtype='html') # Use add_alternative for HTML content\n",
        "\n",
        "    with open(filename, \"rb\") as f:\n",
        "        data = f.read()\n",
        "    msg.add_attachment(data, maintype=\"application\", subtype=\"pdf\", filename=filename)\n",
        "\n",
        "    with smtplib.SMTP_SSL(\"smtp.gmail.com\", 465) as smtp:\n",
        "        smtp.login(EMAIL_ADDRESS, EMAIL_APP_PASSWORD)\n",
        "        smtp.send_message(msg)\n",
        "\n",
        "import requests\n",
        "from googleapiclient.http import MediaFileUpload # Import MediaFileUpload here\n",
        "from fpdf import FPDF\n",
        "import os # Import os to check for file existence\n",
        "\n",
        "# Define prompt templates for different request types\n",
        "# The key of the dictionary should match the value in the 'Request type' column of your Google Sheet (case-insensitive).\n",
        "# The value is the prompt template string, using curly braces {} to insert values from the corresponding row in the sheet.\n",
        "prompt_templates = {\n",
        "    \"invoice\": \"\"\"\n",
        "Generate a professional invoice.\n",
        "\n",
        "**Instructions:**\n",
        "1.  **Recipient:** The invoice is for **{Full Name}**. If a business name is provided ({  Business Name (optional)  }), use it as the primary recipient.\n",
        "2.  **Invoice Details:**\n",
        "    *   Create a unique **Invoice Number** (e.g., INV-001).\n",
        "    *   Use today's date as the **Invoice Date**.\n",
        "    *   Set **Payment Due** to \"Due upon receipt\" unless specified otherwise.\n",
        "3.  **Line Items:**\n",
        "    *   Analyze the **Description & Notes**: \"{Description & Notes}\" to extract services/products, quantities, and prices.\n",
        "    *   List each item clearly with its description, quantity, unit price, and total price.\n",
        "4.  **Calculations:**\n",
        "    *   Calculate the **Subtotal** from the line items.\n",
        "    *   If the description mentions a **discount**, apply it to the subtotal. Clearly state the discount percentage or amount.\n",
        "    *   If the description mentions **VAT** or \"tax,\" calculate it (use 15% if not specified) on the post-discount subtotal.\n",
        "    *   Calculate the final **Total Amount Due**.\n",
        "5.  **Formatting:**\n",
        "    *   The output must be clean, well-structured, and professional.\n",
        "    *   **Do NOT include any placeholders like \"[Your Business Name]\" or \"[Client Address]\". Only use the information provided.**\n",
        "    *   If a price is not mentioned, state \"Amount Due: To be discussed\".\n",
        "\"\"\",\n",
        "    \"contract\": \"\"\"\n",
        "Generate a professional service agreement.\n",
        "\n",
        "**Instructions:**\n",
        "1.  **Parties:** The agreement is between **{Full Name}** (the \"Client\") and the service provider. If a business name is provided ({  Business Name (optional)  }), use it for the Client.\n",
        "2.  **Agreement Details:**\n",
        "    *   Use today's date as the **Effective Date**.\n",
        "    *   The subject of the contract is based on the **Description & Notes**: \"{Description & Notes}\".\n",
        "3.  **Clauses to Include:**\n",
        "    *   **Services:** Clearly define the scope of work, deliverables, and timelines based on the description.\n",
        "    *   **Compensation:** Specify the payment terms, rates, and total fees. If the description includes pricing (e.g., \"R7000 per month\"), use that. Otherwise, state that compensation is \"as agreed upon separately.\"\n",
        "    *   **Term and Termination:** Define the start date and duration of the contract. Include a clause for termination by either party with written notice.\n",
        "    *   **Confidentiality:** Include a standard confidentiality clause to protect sensitive information.\n",
        "    *   **Governing Law:** State that the agreement is governed by the laws of the relevant jurisdiction (e.g., South Africa).\n",
        "4.  **Formatting:**\n",
        "    *   The output must be a formal, well-structured legal document.\n",
        "    *   Use clear headings for each section (e.g., \"1. Services\", \"2. Compensation\").\n",
        "    *   **Do NOT include placeholders like \"[Your Company Name]\" or \"[Client Signature]\". The document should be ready for signature.**\n",
        "    *   Include signature lines for both the Client and the service provider.\n",
        "\"\"\"\n",
        "}\n",
        "\n",
        "\n",
        "# Define the local path for the DejaVuSans font file\n",
        "dejavu_font_local_path = 'DejaVuSans.ttf'\n",
        "\n",
        "# Check if the font file exists locally, if not, download it\n",
        "if not os.path.exists(dejavu_font_local_path):\n",
        "    print(\"Attempting to download DejaVuSans.ttf...\")\n",
        "    font_url = 'http://dejavu-fonts.org/files/dejavu-fonts-ttf-2.37.zip' # URL to DejaVu fonts zip\n",
        "    zip_path = 'dejavu_fonts.zip'\n",
        "    # Download the zip file\n",
        "    try:\n",
        "        response = requests.get(font_url, stream=True)\n",
        "        response.raise_for_status()\n",
        "        with open(zip_path, 'wb') as f:\n",
        "            for chunk in response.iter_content(chunk_size=8192):\n",
        "                f.write(chunk)\n",
        "        print(\"Download complete. Extracting font file...\")\n",
        "\n",
        "        # Extract DejaVuSans.ttf from the zip\n",
        "        import zipfile\n",
        "        with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n",
        "            # Assuming the font is in a specific path within the zip, e.g., dejavu-fonts-ttf-2.37/ttf/DejaVuSans.ttf\n",
        "            # You might need to adjust this path based on the zip file's structure\n",
        "            font_in_zip_path = 'dejavu-fonts-ttf-2.37/ttf/DejaVuSans.ttf' # Common path within the zip\n",
        "            if font_in_zip_path in zip_ref.namelist():\n",
        "                zip_ref.extract(font_in_zip_path, '.') # Extract to the current directory\n",
        "                # Move the extracted file to the desired local path\n",
        "                extracted_font_path = os.path.join('.', font_in_zip_path)\n",
        "                os.rename(extracted_font_path, dejavu_font_local_path)\n",
        "                print(f\"✅ Successfully extracted and moved {dejavu_font_local_path}\")\n",
        "            else:\n",
        "                 print(f\"❌ Error: '{font_in_zip_path}' not found within the zip file.\")\n",
        "                 dejavu_font_local_path = None # Set to None if extraction fails\n",
        "\n",
        "    except requests.exceptions.RequestException as e:\n",
        "        print(f\"❌ Error downloading font file: {e}\")\n",
        "        dejavu_font_local_path = None # Set to None if download fails\n",
        "    except zipfile.BadZipFile:\n",
        "        print(\"❌ Error: Downloaded file is not a valid zip file.\")\n",
        "        dejavu_font_local_path = None\n",
        "    except Exception as e:\n",
        "        print(f\"❌ An unexpected error occurred during font setup: {e}\")\n",
        "        dejavu_font_local_path = None\n",
        "\n",
        "# Main process\n",
        "headers = {\"Authorization\": f\"Bearer {OPENROUTER_API_KEY}\"}\n",
        "for row in data:\n",
        "    email = row.get(\"Client's Email\") or row.get(\"Email\")\n",
        "    if not email:\n",
        "        print(f\"Skipping {row.get('Full Name')}: no email\")\n",
        "        continue\n",
        "\n",
        "    request_type = row.get('Request type', '').lower() # Get request type and convert to lowercase\n",
        "    prompt_template = prompt_templates.get(request_type) # Get the template for the request type\n",
        "\n",
        "    if prompt_template:\n",
        "        # Format the prompt using the template and row data\n",
        "        try:\n",
        "            prompt = prompt_template.format(**row)\n",
        "        except KeyError as e:\n",
        "            print(f\"Skipping {row.get('Full Name')}: Missing data in row for prompt template: {e}\")\n",
        "            continue\n",
        "    else:\n",
        "        # Use a default prompt or skip if no template is found\n",
        "        print(f\"No specific prompt template found for request type: {row.get('Request type')}. Using default prompt.\")\n",
        "        prompt = f\"Generate a document for {row.get('Full Name')}:\\n{row.get('Description & Notes')}\"\n",
        "\n",
        "    # Print the prompt being sent to the API for debugging\n",
        "    print(f\"Prompt being sent to API: {prompt}\")\n",
        "\n",
        "    payload = {\"model\":\"mistralai/mistral-7b-instruct\", \"messages\":[{\"role\":\"user\",\"content\":prompt}]}\n",
        "\n",
        "    try:\n",
        "        resp = requests.post(\"https://openrouter.ai/api/v1/chat/completions\", headers=headers, json=payload)\n",
        "        resp.raise_for_status() # Raise an HTTPError for bad responses (4xx or 5xx)\n",
        "\n",
        "        # Print the full API response for debugging\n",
        "        print(\"Full OpenRouter API Response:\")\n",
        "        print(resp.json())\n",
        "        print(\"-\" * 20) # Separator for clarity\n",
        "\n",
        "\n",
        "        text = resp.json()[\"choices\"][0][\"message\"][\"content\"]\n",
        "\n",
        "        pdf = FPDF()\n",
        "        # Add the DejaVuSans font using the local path if found\n",
        "        if dejavu_font_local_path and os.path.exists(dejavu_font_local_path):\n",
        "            pdf.add_font('DejaVuSans', '', dejavu_font_local_path, uni=True)\n",
        "            pdf.set_font(\"DejaVuSans\", size=12) # Set font only if found\n",
        "        else:\n",
        "            print(\"⚠️ Using default font as DejaVuSans.ttf was not found or could not be downloaded. Unicode characters may not render correctly.\")\n",
        "            pdf.set_font(\"Arial\", size=12) # Fallback to Arial if DejaVuSans not found or unavailable\n",
        "\n",
        "        pdf.add_page()\n",
        "        # Add the entire text block as a single multi_cell\n",
        "        pdf.multi_cell(190, 8, text)\n",
        "        fname = f\"{row['Full Name'].replace(' ','_')}_{row['Request type']}.pdf\"\n",
        "        pdf.output(fname)\n",
        "\n",
        "        # Use google-api-python-client to upload the file\n",
        "        file_metadata = {\n",
        "            'name': fname,\n",
        "            'parents': [TARGET_FOLDER_ID]\n",
        "        }\n",
        "        media = MediaFileUpload(fname, mimetype='application/pdf')\n",
        "        # Use the 'drive' object authenticated in cell 4d328115\n",
        "        file = drive.files().create(body=file_metadata, media_body=media, fields='id').execute()\n",
        "        print(f\"Uploaded file ID: {file.get('id')}\")\n",
        "\n",
        "\n",
        "        send_email_pdf(email, row[\"Full Name\"], fname)\n",
        "        print(f\"✅ Processed & emailed: {row['Full Name']}\")\n",
        "\n",
        "    except requests.exceptions.RequestException as e:\n",
        "        print(f\"❌ Error calling OpenRouter API for {row.get('Full Name')}: {e}\")\n",
        "        if hasattr(e, 'response') and e.response is not None:\n",
        "            print(f\"API Response status code: {e.response.status_code}\")\n",
        "            print(f\"API Response body: {e.response.text}\")\n",
        "        continue # Continue to the next row if there's an API error\n",
        "\n",
        "    except KeyError as e:\n",
        "        print(f\"❌ Error processing API response for {row.get('Full Name')}: Missing key {e}\")\n",
        "        # The full response is already printed above, which should help diagnose this KeyError\n",
        "        continue # Continue to the next row if there's a KeyError in processing the response"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Successfully read 3 rows from the Google Sheet.\n",
            "Attempting to download DejaVuSans.ttf...\n",
            "❌ Error downloading font file: 403 Client Error: Forbidden for url: http://dejavu-fonts.org/files/dejavu-fonts-ttf-2.37.zip\n",
            "Prompt being sent to API: \n",
            "Generate a professional invoice.\n",
            "\n",
            "**Instructions:**\n",
            "1.  **Recipient:** The invoice is for **john Doe**. If a business name is provided (laza effect), use it as the primary recipient.\n",
            "2.  **Invoice Details:**\n",
            "    *   Create a unique **Invoice Number** (e.g., INV-001).\n",
            "    *   Use today's date as the **Invoice Date**.\n",
            "    *   Set **Payment Due** to \"Due upon receipt\" unless specified otherwise.\n",
            "3.  **Line Items:**\n",
            "    *   Analyze the **Description & Notes**: \"logo R800\" to extract services/products, quantities, and prices.\n",
            "    *   List each item clearly with its description, quantity, unit price, and total price.\n",
            "4.  **Calculations:**\n",
            "    *   Calculate the **Subtotal** from the line items.\n",
            "    *   If the description mentions a **discount**, apply it to the subtotal. Clearly state the discount percentage or amount.\n",
            "    *   If the description mentions **VAT** or \"tax,\" calculate it (use 15% if not specified) on the post-discount subtotal.\n",
            "    *   Calculate the final **Total Amount Due**.\n",
            "5.  **Formatting:**\n",
            "    *   The output must be clean, well-structured, and professional.\n",
            "    *   **Do NOT include any placeholders like \"[Your Business Name]\" or \"[Client Address]\". Only use the information provided.**\n",
            "    *   If a price is not mentioned, state \"Amount Due: To be discussed\".\n",
            "\n",
            "❌ Error calling OpenRouter API for john Doe: 408 Client Error: Request Timeout for url: https://openrouter.ai/api/v1/chat/completions\n",
            "API Response status code: 408\n",
            "API Response body: {\"error\":{\"message\":\"Timed out. Please try again.\",\"code\":408}}\n",
            "Prompt being sent to API: \n",
            "Generate a professional service agreement.\n",
            "\n",
            "**Instructions:**\n",
            "1.  **Parties:** The agreement is between **frans Letwaba** (the \"Client\") and the service provider. If a business name is provided (Academy city), use it for the Client.\n",
            "2.  **Agreement Details:**\n",
            "    *   Use today's date as the **Effective Date**.\n",
            "    *   The subject of the contract is based on the **Description & Notes**: \"contract to show that i lucky Hlongoane will teach 10 learners per month for R7000 per month for Academy City\".\n",
            "3.  **Clauses to Include:**\n",
            "    *   **Services:** Clearly define the scope of work, deliverables, and timelines based on the description.\n",
            "    *   **Compensation:** Specify the payment terms, rates, and total fees. If the description includes pricing (e.g., \"R7000 per month\"), use that. Otherwise, state that compensation is \"as agreed upon separately.\"\n",
            "    *   **Term and Termination:** Define the start date and duration of the contract. Include a clause for termination by either party with written notice.\n",
            "    *   **Confidentiality:** Include a standard confidentiality clause to protect sensitive information.\n",
            "    *   **Governing Law:** State that the agreement is governed by the laws of the relevant jurisdiction (e.g., South Africa).\n",
            "4.  **Formatting:**\n",
            "    *   The output must be a formal, well-structured legal document.\n",
            "    *   Use clear headings for each section (e.g., \"1. Services\", \"2. Compensation\").\n",
            "    *   **Do NOT include placeholders like \"[Your Company Name]\" or \"[Client Signature]\". The document should be ready for signature.**\n",
            "    *   Include signature lines for both the Client and the service provider.\n",
            "\n",
            "Full OpenRouter API Response:\n",
            "{'id': 'gen-1754635445-cJTWkCn86K0hzEWPqfGm', 'provider': 'Enfer', 'model': 'mistralai/mistral-7b-instruct', 'object': 'chat.completion', 'created': 1754635445, 'choices': [{'logprobs': None, 'finish_reason': 'stop', 'native_finish_reason': 'stop', 'index': 0, 'message': {'role': 'assistant', 'content': ' **AGREEMENT FOR SERVICES**\\n\\nThis Agreement is entered into as of the _[Insert Date]_, between Frans Letwaba, referred to as the \"Client\" and I Lucky Hlongoane, referred to as the \"Service Provider\".\\n\\n**1. Services**\\nThe Client hereby engages the Service Provider for the purpose of providing education services. The Service Provider will teach ten (10) learners per month for Academy City. The term of this Agreement shall commence as of the Effective Date and shall remain in effect for an initial period of one (1) month, with an automatic renewal for subsequent months provided that either party may terminate this Agreement with written notice at any time.\\n\\n**2. Compensation**\\nThe compensation for the above-mentioned services is R7000 (seven thousand South African Rand) per month. Payment will be made in advance on the first day of each month commencing on the Effective Date.\\n\\n**3. Term and Termination**\\nThis Agreement shall continue in effect for as long as the Client requires the Service Provider\\'s services and the Service Provider is willing to perform them. Either party may terminate this Agreement upon written notice to the other party at least thirty (30) days prior to the effective date of the termination.\\n\\n**4. Confidentiality**\\nEach party is under an obligation to maintain the confidentiality of any confidential information that may be disclosed to them by the other party. Confidential information shall not be disclosed to third parties without the prior written consent of the other party, except as required by law.\\n\\n**5. Governing Law**\\nThis Agreement shall be governed by and construed in accordance with the laws of South Africa without giving effect to any principles of conflicts of law.\\n\\n**Signed,**\\n\\n**I Lucky Hlongoane**\\n(Service Provider)\\n\\n---\\n\\n**Frans Letwaba**\\n(Client)\\n\\n**ACADEMY CITY REPRESENTATIVE**\\n\\n(Name and Title)\\n\\n---\\n\\n**I Lucky Hlongoane REPRESENTATIVE**\\n(Name and Title)', 'refusal': None, 'reasoning': None}}], 'usage': {'prompt_tokens': 425, 'completion_tokens': 478, 'total_tokens': 903}}\n",
            "--------------------\n",
            "⚠️ Using default font as DejaVuSans.ttf was not found or could not be downloaded. Unicode characters may not render correctly.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-720430860.py:199: DeprecationWarning: Substituting font arial by core font helvetica - This is deprecated since v2.7.8, and will soon be removed\n",
            "  pdf.set_font(\"Arial\", size=12) # Fallback to Arial if DejaVuSans not found or unavailable\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Uploaded file ID: 1n3j8ddBRT77DQnQiSV6UywRt7mHFDD4p\n",
            "✅ Processed & emailed: frans Letwaba\n",
            "Prompt being sent to API: \n",
            "Generate a professional invoice.\n",
            "\n",
            "**Instructions:**\n",
            "1.  **Recipient:** The invoice is for **Khwinana Joseph**. If a business name is provided (Dutoit Store), use it as the primary recipient.\n",
            "2.  **Invoice Details:**\n",
            "    *   Create a unique **Invoice Number** (e.g., INV-001).\n",
            "    *   Use today's date as the **Invoice Date**.\n",
            "    *   Set **Payment Due** to \"Due upon receipt\" unless specified otherwise.\n",
            "3.  **Line Items:**\n",
            "    *   Analyze the **Description & Notes**: \"Generate invoice to Dutoit store since i have provided them with 10 computers one costing R1500 AND Provide them with 10% discount ,vat inclusive.\" to extract services/products, quantities, and prices.\n",
            "    *   List each item clearly with its description, quantity, unit price, and total price.\n",
            "4.  **Calculations:**\n",
            "    *   Calculate the **Subtotal** from the line items.\n",
            "    *   If the description mentions a **discount**, apply it to the subtotal. Clearly state the discount percentage or amount.\n",
            "    *   If the description mentions **VAT** or \"tax,\" calculate it (use 15% if not specified) on the post-discount subtotal.\n",
            "    *   Calculate the final **Total Amount Due**.\n",
            "5.  **Formatting:**\n",
            "    *   The output must be clean, well-structured, and professional.\n",
            "    *   **Do NOT include any placeholders like \"[Your Business Name]\" or \"[Client Address]\". Only use the information provided.**\n",
            "    *   If a price is not mentioned, state \"Amount Due: To be discussed\".\n",
            "\n",
            "Full OpenRouter API Response:\n",
            "{'id': 'gen-1754635457-1nEjXdaW8U5VqzekhPNV', 'provider': 'DeepInfra', 'model': 'mistralai/mistral-7b-instruct', 'object': 'chat.completion', 'created': 1754635457, 'choices': [{'logprobs': None, 'finish_reason': 'stop', 'native_finish_reason': 'stop', 'index': 0, 'message': {'role': 'assistant', 'content': \" **Invoice No:** INV-001\\n**Date:**  2022-10-10\\n\\n**Dutoit Store**\\n[Client's Address]\\n[City, Province, Country]\\n\\n**Invoice for Khwinana Joseph**\\n\\n**Items:**\\n\\n| Description               | Quantity | Unit Price | Total Price |\\n|---------------------------|----------|------------|-------------|\\n| 10 Computers (R1500)      | 10       | R1500      | R15000       |\\n\\n**Discount:** 10% off on the total subtotal\\n\\n**Subtotal:** R15000\\n**Discount Amount:** R1500 (10% of R15000)\\n**Total Before VAT:** R14850\\n\\n**VAT (15%):** R2232.50 (15% of R14850)\\n\\n**Total Amount Due:** R17082.50\\n\\n**Payment Due:** Due upon receipt\\n\\nThank you for your business. If you have any questions or concerns, please contact us at [Your Contact Information].\", 'refusal': None, 'reasoning': None}}], 'usage': {'prompt_tokens': 408, 'completion_tokens': 275, 'total_tokens': 683, 'prompt_tokens_details': None}}\n",
            "--------------------\n",
            "⚠️ Using default font as DejaVuSans.ttf was not found or could not be downloaded. Unicode characters may not render correctly.\n",
            "Uploaded file ID: 1chBdCljgK37RoACwDZReX1MsysZvRwpV\n",
            "✅ Processed & emailed: Khwinana Joseph\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "72421ad2"
      },
      "source": [
        "## Improve error handling and user feedback\n",
        "\n",
        "### Subtask:\n",
        "Enhance the error handling in cell `71q0K61_E_lh` to provide more user-friendly messages and guidance if issues occur (e.g., API errors, font problems, data issues).\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5742ecd8"
      },
      "source": [
        "**Reasoning**:\n",
        "I need to enhance the error handling in the provided code cell by modifying existing error messages, adding a specific check for the font file, and including a general exception handler, as per the instructions.\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "a489f62b"
      },
      "source": [
        "## Implement chosen packaging method\n",
        "\n",
        "### Subtask:\n",
        "Implement the chosen packaging method: creating a simple web app using Streamlit and deploying it on Streamlit Cloud. This will involve creating a new Python script for the Streamlit app.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "239f7654",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9d20e02b-c3ee-42ce-e81d-4110955a80f3"
      },
      "source": [
        "# === Read data from Google Sheet ===\n",
        "\n",
        "import gspread\n",
        "from google.colab import auth\n",
        "import google.auth\n",
        "\n",
        "# Authenticate user\n",
        "auth.authenticate_user()\n",
        "\n",
        "# Get credentials using google.auth.default() and authorize gspread\n",
        "credentials, project_id = google.auth.default()\n",
        "gc = gspread.authorize(credentials)\n",
        "\n",
        "\n",
        "# Open the spreadsheet and select the first worksheet\n",
        "spreadsheet = gc.open_by_url(SHEET_URL)\n",
        "worksheet = spreadsheet.sheet1\n",
        "\n",
        "# Get all records as a list of dictionaries\n",
        "data = worksheet.get_all_records()\n",
        "\n",
        "print(f\"✅ Successfully read {len(data)} rows from the Google Sheet.\")\n",
        "\n",
        "# Email function\n",
        "from email.message import EmailMessage\n",
        "import smtplib\n",
        "\n",
        "def send_email_pdf(to_email, client_name, filename):\n",
        "    msg = EmailMessage()\n",
        "    msg[\"From\"] = EMAIL_ADDRESS\n",
        "    msg[\"To\"] = to_email\n",
        "    msg[\"Subject\"] = f\"Your Document – {client_name}\"\n",
        "\n",
        "    # Use HTML for the email content\n",
        "    html_content = f\"\"\"\n",
        "    <html>\n",
        "    <body>\n",
        "        <p>Hi {client_name},</p>\n",
        "        <p>Please find your document attached.</p>\n",
        "        <p>Best,</p>\n",
        "        <p>Pretoria AI</p>\n",
        "    </body>\n",
        "    </html>\n",
        "    \"\"\"\n",
        "    msg.add_alternative(html_content, subtype='html') # Use add_alternative for HTML content\n",
        "\n",
        "    with open(filename, \"rb\") as f:\n",
        "        data = f.read()\n",
        "    msg.add_attachment(data, maintype=\"application\", subtype=\"pdf\", filename=filename)\n",
        "\n",
        "    with smtplib.SMTP_SSL(\"smtp.gmail.com\", 465) as smtp:\n",
        "        smtp.login(EMAIL_ADDRESS, EMAIL_APP_PASSWORD)\n",
        "        smtp.send_message(msg)\n",
        "\n",
        "import requests\n",
        "from googleapiclient.http import MediaFileUpload # Import MediaFileUpload here\n",
        "from fpdf import FPDF\n",
        "import os # Import os to check for file existence\n",
        "\n",
        "# Define prompt templates for different request types\n",
        "# The key of the dictionary should match the value in the 'Request type' column of your Google Sheet (case-insensitive).\n",
        "# The value is the prompt template string, using curly braces {} to insert values from the corresponding row in the sheet.\n",
        "prompt_templates = {\n",
        "    \"invoice\": \"\"\"\n",
        "Generate a professional invoice.\n",
        "\n",
        "**Instructions:**\n",
        "1.  **Recipient:** The invoice is for **{Full Name}**. If a business name is provided ({  Business Name (optional)  }), use it as the primary recipient.\n",
        "2.  **Invoice Details:**\n",
        "    *   Create a unique **Invoice Number** (e.g., INV-001).\n",
        "    *   Use today's date as the **Invoice Date**.\n",
        "    *   Set **Payment Due** to \"Due upon receipt\" unless specified otherwise.\n",
        "3.  **Line Items:**\n",
        "    *   Analyze the **Description & Notes**: \"{Description & Notes}\" to extract services/products, quantities, and prices.\n",
        "    *   List each item clearly with its description, quantity, unit price, and total price.\n",
        "4.  **Calculations:**\n",
        "    *   Calculate the **Subtotal** from the line items.\n",
        "    *   If the description mentions a **discount**, apply it to the subtotal. Clearly state the discount percentage or amount.\n",
        "    *   If the description mentions **VAT** or \"tax,\" calculate it (use 15% if not specified) on the post-discount subtotal.\n",
        "    *   Calculate the final **Total Amount Due**.\n",
        "5.  **Formatting:**\n",
        "    *   The output must be clean, well-structured, and professional.\n",
        "    *   **Do NOT include any placeholders like \"[Your Business Name]\" or \"[Client Address]\". Only use the information provided.**\n",
        "    *   If a price is not mentioned, state \"Amount Due: To be discussed\".\n",
        "\"\"\",\n",
        "    \"contract\": \"\"\"\n",
        "Generate a professional service agreement.\n",
        "\n",
        "**Instructions:**\n",
        "1.  **Parties:** The agreement is between **{Full Name}** (the \"Client\") and the service provider. If a business name is provided ({  Business Name (optional)  }), use it for the Client.\n",
        "2.  **Agreement Details:**\n",
        "    *   Use today's date as the **Effective Date**.\n",
        "    *   The subject of the contract is based on the **Description & Notes**: \"{Description & Notes}\".\n",
        "3.  **Clauses to Include:**\n",
        "    *   **Services:** Clearly define the scope of work, deliverables, and timelines based on the description.\n",
        "    *   **Compensation:** Specify the payment terms, rates, and total fees. If the description includes pricing (e.g., \"R7000 per month\"), use that. Otherwise, state that compensation is \"as agreed upon separately.\"\n",
        "    *   **Term and Termination:** Define the start date and duration of the contract. Include a clause for termination by either party with written notice.\n",
        "    *   **Confidentiality:** Include a standard confidentiality clause to protect sensitive information.\n",
        "    *   **Governing Law:** State that the agreement is governed by the laws of the relevant jurisdiction (e.g., South Africa).\n",
        "4.  **Formatting:**\n",
        "    *   The output must be a formal, well-structured legal document.\n",
        "    *   Use clear headings for each section (e.g., \"1. Services\", \"2. Compensation\").\n",
        "    *   **Do NOT include placeholders like \"[Your Company Name]\" or \"[Client Signature]\". The document should be ready for signature.**\n",
        "    *   Include signature lines for both the Client and the service provider.\n",
        "\"\"\"\n",
        "}\n",
        "\n",
        "\n",
        "# Define the local path for the DejaVuSans font file\n",
        "dejavu_font_local_path = 'DejaVuSans.ttf'\n",
        "\n",
        "# Check if the font file exists locally, if not, download it\n",
        "if not os.path.exists(dejavu_font_local_path):\n",
        "    print(\"Attempting to download DejaVuSans.ttf...\")\n",
        "    font_url = 'http://dejavu-fonts.org/files/dejavu-fonts-ttf-2.37.zip' # URL to DejaVu fonts zip\n",
        "    zip_path = 'dejavu_fonts.zip'\n",
        "    # Download the zip file\n",
        "    try:\n",
        "        response = requests.get(font_url, stream=True)\n",
        "        response.raise_for_status()\n",
        "        with open(zip_path, 'wb') as f:\n",
        "            for chunk in response.iter_content(chunk_size=8192):\n",
        "                f.write(chunk)\n",
        "        print(\"Download complete. Extracting font file...\")\n",
        "\n",
        "        # Extract DejaVuSans.ttf from the zip\n",
        "        import zipfile\n",
        "        with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n",
        "            # Assuming the font is in a specific path within the zip, e.g., dejavu-fonts-ttf-2.37/ttf/DejaVuSans.ttf\n",
        "            # You might need to adjust this path based on the zip file's structure\n",
        "            font_in_zip_path = 'dejavu-fonts-ttf-2.37/ttf/DejaVuSans.ttf' # Common path within the zip\n",
        "            if font_in_zip_path in zip_ref.namelist():\n",
        "                zip_ref.extract(font_in_zip_path, '.') # Extract to the current directory\n",
        "                # Move the extracted file to the desired local path\n",
        "                extracted_font_path = os.path.join('.', font_in_zip_path)\n",
        "                os.rename(extracted_font_path, dejavu_font_local_path)\n",
        "                print(f\"✅ Successfully extracted and moved {dejavu_font_local_path}\")\n",
        "            else:\n",
        "                 print(f\"❌ Error: '{font_in_zip_path}' not found within the zip file.\")\n",
        "                 dejavu_font_local_path = None # Set to None if extraction fails\n",
        "\n",
        "    except requests.exceptions.RequestException as e:\n",
        "        print(f\"❌ Error downloading font file: {e}\")\n",
        "        dejavu_font_local_path = None # Set to None if download fails\n",
        "    except zipfile.BadZipFile:\n",
        "        print(\"❌ Error: Downloaded file is not a valid zip file.\")\n",
        "        dejavu_font_local_path = None\n",
        "    except Exception as e:\n",
        "        print(f\"❌ An unexpected error occurred during font setup: {e}\")\n",
        "        dejavu_font_local_path = None\n",
        "\n",
        "# Main process\n",
        "headers = {\"Authorization\": f\"Bearer {OPENROUTER_API_KEY}\"}\n",
        "for row in data:\n",
        "    client_name = row.get('Full Name')\n",
        "    email = row.get(\"Client's Email\") or row.get(\"Email\")\n",
        "    if not email:\n",
        "        print(f\"Skipping {client_name}: no email provided.\")\n",
        "        continue\n",
        "\n",
        "    request_type = row.get('Request type', '').lower() # Get request type and convert to lowercase\n",
        "    prompt_template = prompt_templates.get(request_type) # Get the template for the request type\n",
        "\n",
        "    if prompt_template:\n",
        "        # Format the prompt using the template and row data\n",
        "        try:\n",
        "            prompt = prompt_template.format(**row)\n",
        "        except KeyError as e:\n",
        "            print(f\"❌ Skipping {client_name}: Missing required data in the Google Sheet for the '{request_type}' template. Missing key: {e}\")\n",
        "            continue\n",
        "    else:\n",
        "        # Use a default prompt or skip if no template is found\n",
        "        print(f\"ℹ️ No specific prompt template found for request type: '{row.get('Request type')}' for client {client_name}. Using a default prompt based on Description & Notes.\")\n",
        "        prompt = f\"Generate a document for {client_name}:\\n{row.get('Description & Notes')}\"\n",
        "\n",
        "    # Print the prompt being sent to the API for debugging\n",
        "    print(f\"Prompt being sent to API for {client_name}: {prompt}\")\n",
        "\n",
        "    payload = {\"model\":\"mistralai/mistral-7b-instruct\", \"messages\":[{\"role\":\"user\",\"content\":prompt}]}\n",
        "\n",
        "    try:\n",
        "        resp = requests.post(\"https://openrouter.ai/api/v1/chat/completions\", headers=headers, json=payload)\n",
        "        resp.raise_for_status() # Raise an HTTPError for bad responses (4xx or 5xx)\n",
        "\n",
        "        # Print the full API response for debugging\n",
        "        # print(\"Full OpenRouter API Response:\") # Commented out to reduce noise, uncomment for detailed debugging\n",
        "        # print(resp.json())\n",
        "        # print(\"-\" * 20) # Separator for clarity\n",
        "\n",
        "\n",
        "        text = resp.json()[\"choices\"][0][\"message\"][\"content\"]\n",
        "\n",
        "        pdf = FPDF()\n",
        "        # Check if the font is available before attempting to add it\n",
        "        if dejavu_font_local_path and os.path.exists(dejavu_font_local_path):\n",
        "            try:\n",
        "                pdf.add_font('DejaVuSans', '', dejavu_font_local_path, uni=True)\n",
        "                pdf.set_font(\"DejaVuSans\", size=12) # Set font only if found\n",
        "                print(f\"✅ Using DejaVuSans font for {client_name}'s PDF.\")\n",
        "            except Exception as font_error:\n",
        "                print(f\"❌ Error adding DejaVuSans font for {client_name}: {font_error}. Falling back to default font.\")\n",
        "                pdf.set_font(\"Arial\", size=12) # Fallback to Arial if DejaVuSans fails\n",
        "        else:\n",
        "            print(f\"⚠️ DejaVuSans font file not found or could not be loaded for {client_name}. Using default font. Unicode characters may not render correctly.\")\n",
        "            pdf.set_font(\"Arial\", size=12) # Fallback to Arial if DejaVuSans not found or unavailable\n",
        "\n",
        "        pdf.add_page()\n",
        "        # Add the entire text block as a single multi_cell\n",
        "        pdf.multi_cell(190, 8, text)\n",
        "        fname = f\"{client_name.replace(' ','_')}_{request_type}.pdf\"\n",
        "        pdf.output(fname)\n",
        "\n",
        "        # Use google-api-python-client to upload the file\n",
        "        file_metadata = {\n",
        "            'name': fname,\n",
        "            'parents': [TARGET_FOLDER_ID]\n",
        "        }\n",
        "        media = MediaFileUpload(fname, mimetype='application/pdf')\n",
        "        # Use the 'drive' object authenticated in cell 4d328115\n",
        "        file = drive.files().create(body=file_metadata, media_body=media, fields='id').execute()\n",
        "        print(f\"✅ Uploaded file '{fname}' to Google Drive with ID: {file.get('id')}\")\n",
        "\n",
        "\n",
        "        send_email_pdf(email, client_name, fname)\n",
        "        print(f\"✅ Processed & emailed: {client_name}\")\n",
        "\n",
        "    except requests.exceptions.RequestException as e:\n",
        "        print(f\"❌ Error calling OpenRouter API for {client_name}: {e}\")\n",
        "        print(\"Please check your API key, network connection, or the OpenRouter service status.\")\n",
        "        if hasattr(e, 'response') and e.response is not None:\n",
        "            print(f\"API Response status code: {e.response.status_code}\")\n",
        "            print(f\"API Response body: {e.response.text}\")\n",
        "        continue # Continue to the next row if there's an API error\n",
        "\n",
        "    except KeyError as e:\n",
        "        print(f\"❌ Error processing API response for {client_name}: The API response structure was unexpected. Missing key: {e}\")\n",
        "        print(\"This might be an issue with how the response is being parsed. Please check the API response structure.\")\n",
        "        # The full response is already printed above (if not commented out), which should help diagnose this KeyError\n",
        "        continue # Continue to the next row if there's a KeyError in processing the response\n",
        "    except Exception as e:\n",
        "        print(f\"❌ An unexpected error occurred while processing data for {client_name}: {e}\")\n",
        "        print(\"Please review the data for this row or the processing logic.\")\n",
        "        continue # Continue to the next row for any other unexpected error\n"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Successfully read 3 rows from the Google Sheet.\n",
            "Attempting to download DejaVuSans.ttf...\n",
            "❌ Error downloading font file: 403 Client Error: Forbidden for url: http://dejavu-fonts.org/files/dejavu-fonts-ttf-2.37.zip\n",
            "Prompt being sent to API for john Doe: \n",
            "Generate a professional invoice.\n",
            "\n",
            "**Instructions:**\n",
            "1.  **Recipient:** The invoice is for **john Doe**. If a business name is provided (laza effect), use it as the primary recipient.\n",
            "2.  **Invoice Details:**\n",
            "    *   Create a unique **Invoice Number** (e.g., INV-001).\n",
            "    *   Use today's date as the **Invoice Date**.\n",
            "    *   Set **Payment Due** to \"Due upon receipt\" unless specified otherwise.\n",
            "3.  **Line Items:**\n",
            "    *   Analyze the **Description & Notes**: \"logo R800\" to extract services/products, quantities, and prices.\n",
            "    *   List each item clearly with its description, quantity, unit price, and total price.\n",
            "4.  **Calculations:**\n",
            "    *   Calculate the **Subtotal** from the line items.\n",
            "    *   If the description mentions a **discount**, apply it to the subtotal. Clearly state the discount percentage or amount.\n",
            "    *   If the description mentions **VAT** or \"tax,\" calculate it (use 15% if not specified) on the post-discount subtotal.\n",
            "    *   Calculate the final **Total Amount Due**.\n",
            "5.  **Formatting:**\n",
            "    *   The output must be clean, well-structured, and professional.\n",
            "    *   **Do NOT include any placeholders like \"[Your Business Name]\" or \"[Client Address]\". Only use the information provided.**\n",
            "    *   If a price is not mentioned, state \"Amount Due: To be discussed\".\n",
            "\n",
            "⚠️ DejaVuSans font file not found or could not be loaded for john Doe. Using default font. Unicode characters may not render correctly.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-1516911392.py:205: DeprecationWarning: Substituting font arial by core font helvetica - This is deprecated since v2.7.8, and will soon be removed\n",
            "  pdf.set_font(\"Arial\", size=12) # Fallback to Arial if DejaVuSans not found or unavailable\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Uploaded file 'john_Doe_invoice.pdf' to Google Drive with ID: 1Yq_3iawGOxDwut6rZUTvjj-ThNlYNn10\n",
            "✅ Processed & emailed: john Doe\n",
            "Prompt being sent to API for frans Letwaba: \n",
            "Generate a professional service agreement.\n",
            "\n",
            "**Instructions:**\n",
            "1.  **Parties:** The agreement is between **frans Letwaba** (the \"Client\") and the service provider. If a business name is provided (Academy city), use it for the Client.\n",
            "2.  **Agreement Details:**\n",
            "    *   Use today's date as the **Effective Date**.\n",
            "    *   The subject of the contract is based on the **Description & Notes**: \"contract to show that i lucky Hlongoane will teach 10 learners per month for R7000 per month for Academy City\".\n",
            "3.  **Clauses to Include:**\n",
            "    *   **Services:** Clearly define the scope of work, deliverables, and timelines based on the description.\n",
            "    *   **Compensation:** Specify the payment terms, rates, and total fees. If the description includes pricing (e.g., \"R7000 per month\"), use that. Otherwise, state that compensation is \"as agreed upon separately.\"\n",
            "    *   **Term and Termination:** Define the start date and duration of the contract. Include a clause for termination by either party with written notice.\n",
            "    *   **Confidentiality:** Include a standard confidentiality clause to protect sensitive information.\n",
            "    *   **Governing Law:** State that the agreement is governed by the laws of the relevant jurisdiction (e.g., South Africa).\n",
            "4.  **Formatting:**\n",
            "    *   The output must be a formal, well-structured legal document.\n",
            "    *   Use clear headings for each section (e.g., \"1. Services\", \"2. Compensation\").\n",
            "    *   **Do NOT include placeholders like \"[Your Company Name]\" or \"[Client Signature]\". The document should be ready for signature.**\n",
            "    *   Include signature lines for both the Client and the service provider.\n",
            "\n",
            "⚠️ DejaVuSans font file not found or could not be loaded for frans Letwaba. Using default font. Unicode characters may not render correctly.\n",
            "✅ Uploaded file 'frans_Letwaba_contract.pdf' to Google Drive with ID: 1e9UtxACRvV-hpdx5lf4ByH9r0Uwr4nAo\n",
            "✅ Processed & emailed: frans Letwaba\n",
            "Prompt being sent to API for Khwinana Joseph: \n",
            "Generate a professional invoice.\n",
            "\n",
            "**Instructions:**\n",
            "1.  **Recipient:** The invoice is for **Khwinana Joseph**. If a business name is provided (Dutoit Store), use it as the primary recipient.\n",
            "2.  **Invoice Details:**\n",
            "    *   Create a unique **Invoice Number** (e.g., INV-001).\n",
            "    *   Use today's date as the **Invoice Date**.\n",
            "    *   Set **Payment Due** to \"Due upon receipt\" unless specified otherwise.\n",
            "3.  **Line Items:**\n",
            "    *   Analyze the **Description & Notes**: \"Generate invoice to Dutoit store since i have provided them with 10 computers one costing R1500 AND Provide them with 10% discount ,vat inclusive.\" to extract services/products, quantities, and prices.\n",
            "    *   List each item clearly with its description, quantity, unit price, and total price.\n",
            "4.  **Calculations:**\n",
            "    *   Calculate the **Subtotal** from the line items.\n",
            "    *   If the description mentions a **discount**, apply it to the subtotal. Clearly state the discount percentage or amount.\n",
            "    *   If the description mentions **VAT** or \"tax,\" calculate it (use 15% if not specified) on the post-discount subtotal.\n",
            "    *   Calculate the final **Total Amount Due**.\n",
            "5.  **Formatting:**\n",
            "    *   The output must be clean, well-structured, and professional.\n",
            "    *   **Do NOT include any placeholders like \"[Your Business Name]\" or \"[Client Address]\". Only use the information provided.**\n",
            "    *   If a price is not mentioned, state \"Amount Due: To be discussed\".\n",
            "\n",
            "⚠️ DejaVuSans font file not found or could not be loaded for Khwinana Joseph. Using default font. Unicode characters may not render correctly.\n",
            "✅ Uploaded file 'Khwinana_Joseph_invoice.pdf' to Google Drive with ID: 1P1f8XrV3cYHvlYV4VYxcuxhWv2RmrgWV\n",
            "✅ Processed & emailed: Khwinana Joseph\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fda1ad78"
      },
      "source": [
        "**Reasoning**:\n",
        "I will start by creating the `app.py` file and adding the necessary imports. This is the first step in building the Streamlit application and sets up the foundation for the rest of the app's functionality.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "f25f7192",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7275c2c6-00c3-40aa-e436-1b954e8d911f"
      },
      "source": [
        "%%writefile app.py\n",
        "import streamlit as st\n",
        "import requests\n",
        "import gspread\n",
        "from fpdf import FPDF\n",
        "import smtplib\n",
        "import os\n",
        "from email.message import EmailMessage\n",
        "import zipfile # Import zipfile\n",
        "\n",
        "# --- Hardcoded Configuration (for simplicity in Streamlit Cloud) ---\n",
        "# In a real-world scenario, use Streamlit's secrets management\n",
        "OPENROUTER_API_KEY = \"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\"\n",
        "EMAIL_ADDRESS = \"luckythlongoane@gmail.com\"\n",
        "EMAIL_APP_PASSWORD = \"fiofdpitvclmkdhg\"\n",
        "\n",
        "# Define the local path for the DejaVuSans font file\n",
        "# Assume DejaVuSans.ttf is in the same directory as app.py\n",
        "dejavu_font_local_path = 'DejaVuSans.ttf'\n",
        "\n",
        "# Attempt to download and extract font if it's not present (useful for local testing/Colab)\n",
        "# In Streamlit Cloud, you would typically include the font file directly in your repo\n",
        "if not os.path.exists(dejavu_font_local_path):\n",
        "    st.warning(\"DejaVuSans.ttf not found locally. Attempting download (this might not work in deployment).\")\n",
        "    font_url = 'http://dejavu-fonts.org/files/dejavu-fonts-ttf-2.37.zip' # URL to DejaVu fonts zip\n",
        "    zip_path = 'dejavu_fonts.zip'\n",
        "    try:\n",
        "        response = requests.get(font_url, stream=True)\n",
        "        response.raise_for_status()\n",
        "        with open(zip_path, 'wb') as f:\n",
        "            for chunk in response.iter_content(chunk_size=8192):\n",
        "                f.write(chunk)\n",
        "        with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n",
        "            font_in_zip_path = 'dejavu-fonts-ttf-2.37/ttf/DejaVuSans.ttf'\n",
        "            if font_in_zip_path in zip_ref.namelist():\n",
        "                zip_ref.extract(font_in_zip_path, '.')\n",
        "                extracted_font_path = os.path.join('.', font_in_zip_path)\n",
        "                os.rename(extracted_font_path, dejavu_font_local_path)\n",
        "                st.success(\"DejaVuSans.ttf downloaded and extracted.\")\n",
        "            else:\n",
        "                 st.error(f\"Error: '{font_in_zip_path}' not found within the zip file.\")\n",
        "                 dejavu_font_local_path = None\n",
        "    except Exception as e:\n",
        "        st.error(f\"Error during font setup: {e}\")\n",
        "        dejavu_font_local_path = None\n",
        "\n",
        "\n",
        "# --- Core Functions (from Colab notebook) ---\n",
        "\n",
        "def send_email_pdf(to_email, client_name, filename, pdf_data):\n",
        "    \"\"\"Sends an email with a PDF attachment.\"\"\"\n",
        "    msg = EmailMessage()\n",
        "    msg[\"From\"] = EMAIL_ADDRESS\n",
        "    msg[\"To\"] = to_email\n",
        "    msg[\"Subject\"] = f\"Your Document – {client_name}\"\n",
        "\n",
        "    html_content = f\"\"\"\n",
        "    <html>\n",
        "    <body>\n",
        "        <p>Hi {client_name},</p>\n",
        "        <p>Please find your document attached.</p>\n",
        "        <p>Best,</p>\n",
        "        <p>Pretoria AI</p>\n",
        "    </body>\n",
        "    </html>\n",
        "    \"\"\"\n",
        "    msg.add_alternative(html_content, subtype='html')\n",
        "    msg.add_attachment(pdf_data, maintype=\"application\", subtype=\"pdf\", filename=filename)\n",
        "\n",
        "    try:\n",
        "        with smtplib.SMTP_SSL(\"smtp.gmail.com\", 465) as smtp:\n",
        "            smtp.login(EMAIL_ADDRESS, EMAIL_APP_PASSWORD)\n",
        "            smtp.send_message(msg)\n",
        "        return True, None\n",
        "    except Exception as e:\n",
        "        return False, str(e)\n",
        "\n",
        "def generate_document_from_api(prompt):\n",
        "    \"\"\"Calls the OpenRouter API to generate document content.\"\"\"\n",
        "    headers = {\"Authorization\": f\"Bearer {OPENROUTER_API_KEY}\"}\n",
        "    payload = {\"model\": \"mistralai/mistral-7b-instruct\", \"messages\": [{\"role\": \"user\", \"content\": prompt}]}\n",
        "\n",
        "    try:\n",
        "        response = requests.post(\"https://openrouter.ai/api/v1/chat/completions\", headers=headers, json=payload)\n",
        "        response.raise_for_status()\n",
        "        text = response.json()[\"choices\"][0][\"message\"][\"content\"]\n",
        "        return text, None\n",
        "    except requests.exceptions.RequestException as e:\n",
        "        return None, f\"API Error: {e}. Response: {e.response.text if e.response else 'N/A'}\"\n",
        "    except (KeyError, IndexError) as e:\n",
        "        return None, f\"Error processing API response: {e}\"\n",
        "\n",
        "def create_pdf(text_content, font_path):\n",
        "    \"\"\"Creates a PDF from the given text content using a specified font.\"\"\"\n",
        "    pdf = FPDF()\n",
        "    pdf.add_page()\n",
        "    if font_path and os.path.exists(font_path):\n",
        "        try:\n",
        "            pdf.add_font('DejaVuSans', '', font_path, uni=True)\n",
        "            pdf.set_font(\"DejaVuSans\", size=12)\n",
        "        except Exception as e:\n",
        "            st.warning(f\"Could not load specified font {font_path}. Falling back to Arial. Error: {e}\")\n",
        "            pdf.set_font(\"Arial\", size=12)\n",
        "            # Attempt to handle potential encoding issues by replacing unsupported characters\n",
        "            text_content = text_content.encode('latin-1', 'replace').decode('latin-1')\n",
        "    else:\n",
        "        st.warning(\"Font file not found at specified path. Using default Arial font. Unicode characters may not render correctly.\")\n",
        "        pdf.set_font(\"Arial\", size=12)\n",
        "        # Attempt to handle potential encoding issues by replacing unsupported characters\n",
        "        text_content = text_content.encode('latin-1', 'replace').decode('latin-1')\n",
        "\n",
        "    pdf.multi_cell(190, 8, text_content)\n",
        "    return pdf.output(dest='S').encode('latin-1')\n",
        "\n",
        "\n",
        "# --- Streamlit App UI ---\n",
        "\n",
        "st.title(\"📄 Document Agent for Small Businesses\")\n",
        "\n",
        "st.info(\"This tool generates professional documents like invoices and contracts. Fill in the details below and click 'Generate Document'.\")\n",
        "\n",
        "# --- User Inputs ---\n",
        "with st.form(\"document_form\"):\n",
        "    client_name = st.text_input(\"Client's Full Name\", placeholder=\"e.g., John Doe\")\n",
        "    client_email = st.text_input(\"Client's Email Address\", placeholder=\"e.g., john.doe@example.com\")\n",
        "    business_name = st.text_input(\"Business Name (Optional)\", placeholder=\"e.g., Doe's Digital Solutions\")\n",
        "    request_type = st.selectbox(\"Select Document Type\", [\"Invoice\", \"Contract\"], index=0)\n",
        "    description = st.text_area(\"Description & Notes\", placeholder=\"Provide all necessary details for the document. \\nFor an invoice, include services, quantities, and prices (e.g., 'Web design - R5000, Logo - R1500'). \\nFor a contract, describe the services, terms, and duration.\")\n",
        "\n",
        "    submitted = st.form_submit_button(\"Generate & Email Document\")\n",
        "\n",
        "\n",
        "# --- Main Processing Logic ---\n",
        "if submitted:\n",
        "    if not client_name or not client_email or not description:\n",
        "        st.error(\"Please fill in all required fields: Client's Name, Email, and Description.\")\n",
        "    else:\n",
        "        with st.spinner(f\"Generating {request_type.lower()} for {client_name}...\"):\n",
        "            # 1. Construct the prompt\n",
        "            prompt_templates = {\n",
        "                \"invoice\": \"\"\"\n",
        "    Generate a professional invoice for {client_name} of {business_name}.\n",
        "    Details: {description}\n",
        "    - Create a unique Invoice Number and use today's date.\n",
        "    - List items with prices, calculate subtotal, a 15% VAT, and a final total.\n",
        "    - Do NOT include placeholders like '[Your Company Name]'.\n",
        "    \"\"\",\n",
        "                \"contract\": \"\"\"\n",
        "    Generate a formal service agreement between Pretoria AI and {client_name}.\n",
        "    The core of the agreement is: {description}.\n",
        "    - Include clauses for Services, Compensation, Term, Confidentiality, and Termination.\n",
        "    - Do NOT include placeholders for signatures.\n",
        "    \"\"\"\n",
        "            }\n",
        "            prompt = prompt_templates[request_type.lower()].format(\n",
        "                client_name=client_name,\n",
        "                business_name=business_name if business_name else client_name,\n",
        "                description=description\n",
        "            )\n",
        "\n",
        "            # 2. Generate document content\n",
        "            st.write(\"Step 1: Calling AI to generate document text...\")\n",
        "            generated_text, error = generate_document_from_api(prompt)\n",
        "\n",
        "            if error:\n",
        "                st.error(f\"Failed to generate document. {error}\")\n",
        "            else:\n",
        "                st.success(\"Document text generated successfully.\")\n",
        "                st.write(\"Step 2: Creating PDF...\")\n",
        "\n",
        "                # 3. Create PDF\n",
        "                # Pass the font path to the create_pdf function\n",
        "                pdf_data = create_pdf(generated_text, dejavu_font_local_path)\n",
        "                st.success(\"PDF created successfully.\")\n",
        "                st.write(\"Step 3: Sending email...\")\n",
        "\n",
        "                # 4. Send Email\n",
        "                filename = f\"{client_name.replace(' ', '_')}_{request_type.lower()}.pdf\"\n",
        "                email_sent, email_error = send_email_pdf(client_email, client_name, filename, pdf_data)\n",
        "\n",
        "                if email_sent:\n",
        "                    st.balloons()\n",
        "                    st.success(f\"✅ Successfully generated and emailed the {request_type} to {client_email}!\")\n",
        "                    st.subheader(\"Generated Document Preview:\")\n",
        "                    st.text_area(\"Content\", generated_text, height=300)\n",
        "                else:\n",
        "                    st.error(f\"Failed to send email. {email_error}\")"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Overwriting app.py\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "edbf8442"
      },
      "source": [
        "**Reasoning**:\n",
        "Now that `app.py` is created, I need to create the `requirements.txt` file. This file is crucial for Streamlit Cloud deployment to ensure all necessary libraries are installed.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4028c57e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "01eb5d7f-446a-42ad-9cdb-9ee11193a077"
      },
      "source": [
        "%%writefile requirements.txt\n",
        "streamlit\n",
        "requests\n",
        "gspread\n",
        "fpdf2\n",
        "oauth2client"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Writing requirements.txt\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fd15e037"
      },
      "source": [
        "## Document usage\n",
        "\n",
        "### Subtask:\n",
        "Create clear instructions or documentation on how others can use your Document Agent, including how to set up their Google Sheet and any necessary API keys.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "c3a1eb7a"
      },
      "source": [
        "**Reasoning**:\n",
        "Create a markdown documentation file explaining how to use the Document Agent, covering setup, Google Sheet structure, API keys, and usage.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4fbd4c0a",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e7cd032a-24b5-4af7-efa2-047ea128d44f"
      },
      "source": [
        "documentation_content = \"\"\"\n",
        "# How to Use the Document Agent\n",
        "\n",
        "This document agent helps small businesses automate the generation of professional documents like invoices and contracts using AI. You provide the client details and document requirements, and the agent generates and emails the document as a PDF.\n",
        "\n",
        "## Setup Requirements\n",
        "\n",
        "To use the Document Agent, you will need:\n",
        "\n",
        "1.  **A Google Account:** Required for Google Sheets and Gmail.\n",
        "2.  **An OpenRouter API Key:** Used to access the AI model that generates the document content. You can obtain one from the [OpenRouter website](https://openrouter.ai/). Keep this key secure.\n",
        "3.  **A Gmail Account with App Password:** Used to send the generated PDF documents via email. You will need to enable 2-factor authentication on your Gmail account and generate an [App Password](https://support.google.com/accounts/answer/185833) to use instead of your regular password.\n",
        "\n",
        "## Preparing Your Google Sheet\n",
        "\n",
        "If you are using the Google Sheet-based version (like the original Colab notebook), your Google Sheet needs specific columns for the agent to read the necessary information.\n",
        "\n",
        "Create a new Google Sheet and ensure the first row (headers) includes the following columns exactly as written:\n",
        "\n",
        "*   **Full Name:** The full name of the client or recipient.\n",
        "*   **Client's Email:** The email address where the generated document should be sent.\n",
        "*   **Request type:** The type of document you want to generate (e.g., `invoice`, `contract`). This is case-insensitive.\n",
        "*   **Description & Notes:** A detailed description of the services, products, or terms to be included in the document. This is the core information the AI uses to generate the document content.\n",
        "\n",
        "You can include other columns for your own tracking, but the agent will only use the columns listed above.\n",
        "\n",
        "For each document you want to generate, add a new row to the sheet and fill in the details:\n",
        "\n",
        "*   **Invoice:** In 'Description & Notes', include details like the services provided, quantities, unit prices, any discounts, and whether VAT is applicable.\n",
        "*   **Contract:** In 'Description & Notes', outline the scope of work, agreed-upon compensation terms, duration, and any specific clauses you need included.\n",
        "\n",
        "## Using the Streamlit Web App\n",
        "\n",
        "If you are using the Streamlit web app version, you will interact with a simple web form instead of a Google Sheet for input.\n",
        "\n",
        "1.  Access the web app URL provided to you.\n",
        "2.  Fill in the required fields on the form:\n",
        "    *   Client's Full Name\n",
        "    *   Client's Email Address\n",
        "    *   Select the Document Type (Invoice or Contract)\n",
        "    *   Provide a detailed Description & Notes, similar to how you would for the Google Sheet version.\n",
        "3.  Click the \"Generate & Email Document\" button.\n",
        "4.  The agent will process your request using the AI, generate a PDF, and email it to the email address you provided.\n",
        "\n",
        "## Important Notes and Troubleshooting\n",
        "\n",
        "*   **Document Complexity:** The AI works best with clear and specific instructions in the 'Description & Notes' field. Highly complex or ambiguous requests may result in less accurate documents.\n",
        "*   **Formatting:** While the agent attempts professional formatting, review the generated PDF for any minor formatting issues, especially with complex descriptions or special characters (due to font limitations).\n",
        "*   **Email Delivery:** Check your spam or junk folder if you don't receive the email within a few minutes. Ensure the sender email address ({}) is added to your contacts or safe sender list.\n",
        "*   **API Limits:** Be mindful of the usage limits of your OpenRouter API key, especially on free tiers.\n",
        "*   **Data Accuracy:** The accuracy of the generated document depends entirely on the information you provide in the input (Google Sheet row or web form). Double-check your inputs before generating.\n",
        "*   **Security:** Keep your API keys and email app password secure and do not share them publicly. If you are hosting the web app, use secure methods (like Streamlit's secrets management) to store credentials.\n",
        "\n",
        "For any issues not covered here, please refer to the source code or contact the developer.\n",
        "\"\"\".format(EMAIL_ADDRESS) # Format with the actual email address\n",
        "\n",
        "# You can choose to print this content or save it to a markdown file\n",
        "# print(documentation_content)\n",
        "\n",
        "# To save as a markdown file:\n",
        "with open(\"document_agent_documentation.md\", \"w\") as f:\n",
        "    f.write(documentation_content)\n",
        "\n",
        "print(\"Documentation generated and saved to document_agent_documentation.md\")"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Documentation generated and saved to document_agent_documentation.md\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "b94a5b21"
      },
      "source": [
        "## Summary:\n",
        "\n",
        "### Data Analysis Key Findings\n",
        "- The Document Agent can be packaged as a user-friendly Streamlit web application, making it accessible to non-technical users. This is a significant improvement over sharing a code-based notebook.\n",
        "- Prompt engineering is crucial for the quality of the generated documents. By creating specific, detailed templates for different document types like invoices and contracts, the agent's output becomes more precise and professionally formatted.\n",
        "- Robust error handling is essential for a reliable tool. The agent was enhanced to provide clear, user-friendly feedback for various issues, including API failures, missing data, and font loading problems, ensuring a better user experience.\n",
        "- Comprehensive documentation is key to user adoption. A detailed guide was created to instruct users on setup, usage of both the spreadsheet and web app versions, and troubleshooting common issues.\n",
        "\n",
        "### Insights or Next Steps\n",
        "- **Insight**: The current process relies on hardcoded API keys and email credentials within the script, which poses a security risk.\n",
        "- **Next Step**: Implement a secure method for managing secrets, such as using environment variables or a dedicated secrets management service like Streamlit's built-in secrets manager, to protect sensitive credentials.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1a7a2c90"
      },
      "source": [
        "# Task\n",
        "Explain the error in the selected code. If possible, fix the error and incorporate the changes into the existing code. Otherwise, try to diagnose the error. Now that my code is working how do i make it stable to avoid font errors since i am now deploying into an app with streamlit community cloud"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "17c83cc7"
      },
      "source": [
        "## Enhance prompt templates\n",
        "\n",
        "### Subtask:\n",
        "Refine the existing and create new, more detailed prompt templates in cell `71q0K61_E_lh` to improve the precision and variety of generated documents, ensuring they only include necessary information and follow professional formats.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1e588d90"
      },
      "source": [
        "**Reasoning**:\n",
        "I need to modify the `prompt_templates` dictionary in cell `71q0K61_E_lh` as instructed. I will update the \"invoice\" template and create a new \"contract\" template with detailed instructions for the AI to improve document generation precision and variety.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "c910181f"
      },
      "source": [
        "# Modify the existing prompt_templates dictionary\n",
        "prompt_templates = {\n",
        "    \"invoice\": \"\"\"\n",
        "Generate a professional invoice.\n",
        "\n",
        "**Instructions:**\n",
        "1.  **Recipient:** The invoice is for **{Full Name}**. If a business name is provided ({  Business Name (optional)  }), use it as the primary recipient.\n",
        "2.  **Invoice Details:**\n",
        "    *   Create a unique **Invoice Number** (e.g., INV-001).\n",
        "    *   Use today's date as the **Invoice Date**.\n",
        "    *   Set **Payment Due** to \"Due upon receipt\" unless specified otherwise.\n",
        "3.  **Line Items:**\n",
        "    *   Analyze the **Description & Notes**: \"{Description & Notes}\" to extract services/products, quantities, and prices.\n",
        "    *   List each item clearly with its description, quantity, unit price, and total price.\n",
        "4.  **Calculations:**\n",
        "    *   Calculate the **Subtotal** from the line items.\n",
        "    *   If the description mentions a **discount**, apply it to the subtotal. Clearly state the discount percentage or amount.\n",
        "    *   If the description mentions **VAT** or \"tax,\" calculate it (use 15% if not specified) on the post-discount subtotal.\n",
        "    *   Calculate the final **Total Amount Due**.\n",
        "5.  **Formatting:**\n",
        "    *   The output must be clean, well-structured, and professional.\n",
        "    *   **Do NOT include any placeholders like \"[Your Business Name]\" or \"[Client Address]\". Only use the information provided.**\n",
        "    *   If a price is not mentioned, state \"Amount Due: To be discussed\".\n",
        "\"\"\",\n",
        "    \"contract\": \"\"\"\n",
        "Generate a professional service agreement.\n",
        "\n",
        "**Instructions:**\n",
        "1.  **Parties:** The agreement is between **{Full Name}** (the \"Client\") and the service provider. If a business name is provided ({  Business Name (optional)  }), use it for the Client.\n",
        "2.  **Agreement Details:**\n",
        "    *   Use today's date as the **Effective Date**.\n",
        "    *   The subject of the contract is based on the **Description & Notes**: \"{Description & Notes}\".\n",
        "3.  **Clauses to Include:**\n",
        "    *   **Services:** Clearly define the scope of work, deliverables, and timelines based on the description.\n",
        "    *   **Compensation:** Specify the payment terms, rates, and total fees. If the description includes pricing (e.g., \"R7000 per month\"), use that. Otherwise, state that compensation is \"as agreed upon separately.\"\n",
        "    *   **Term and Termination:** Define the start date and duration of the contract. Include a clause for termination by either party with written notice.\n",
        "    *   **Confidentiality:** Include a standard confidentiality clause to protect sensitive information.\n",
        "    *   **Governing Law:** State that the agreement is governed by the laws of the relevant jurisdiction (e.g., South Africa).\n",
        "4.  **Formatting:**\n",
        "    *   The output must be a formal, well-structured legal document.\n",
        "    *   Use clear headings for each section (e.g., \"1. Services\", \"2. Compensation\").\n",
        "    *   **Do NOT include placeholders like \"[Your Company Name]\" or \"[Client Signature]\". The document should be ready for signature.**\n",
        "    *   Include signature lines for both the Client and the service provider.\n",
        "\"\"\"\n",
        "}"
      ],
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1747f4da"
      },
      "source": [
        "## Improve error handling and user feedback\n",
        "\n",
        "### Subtask:\n",
        "Enhance the error handling in cell `239f7654` to provide more user-friendly messages and guidance if issues occur (e.g., API errors, data issues).\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f1f21c73"
      },
      "source": [
        "**Reasoning**:\n",
        "Enhance the error handling in the provided code cell by modifying existing error messages, adding a specific check for the font file, and including a general exception handler, as per the instructions.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7014306e",
        "outputId": "2a5d5cdb-8c00-408a-e505-30cc5378192f"
      },
      "source": [
        "# === Read data from Google Sheet ===\n",
        "\n",
        "import gspread\n",
        "from google.colab import auth\n",
        "import google.auth\n",
        "\n",
        "# Authenticate user\n",
        "auth.authenticate_user()\n",
        "\n",
        "# Get credentials using google.auth.default() and authorize gspread\n",
        "credentials, project_id = google.auth.default()\n",
        "gc = gspread.authorize(credentials)\n",
        "\n",
        "\n",
        "# Open the spreadsheet and select the first worksheet\n",
        "spreadsheet = gc.open_by_url(SHEET_URL)\n",
        "worksheet = spreadsheet.sheet1\n",
        "\n",
        "# Get all records as a list of dictionaries\n",
        "data = worksheet.get_all_records()\n",
        "\n",
        "print(f\"✅ Successfully read {len(data)} rows from the Google Sheet.\")\n",
        "\n",
        "# Email function\n",
        "from email.message import EmailMessage\n",
        "import smtplib\n",
        "\n",
        "def send_email_pdf(to_email, client_name, filename):\n",
        "    msg = EmailMessage()\n",
        "    msg[\"From\"] = EMAIL_ADDRESS\n",
        "    msg[\"To\"] = to_email\n",
        "    msg[\"Subject\"] = f\"Your Document – {client_name}\"\n",
        "\n",
        "    # Use HTML for the email content\n",
        "    html_content = f\"\"\"\n",
        "    <html>\n",
        "    <body>\n",
        "        <p>Hi {client_name},</p>\n",
        "        <p>Please find your document attached.</p>\n",
        "        <p>Best,</p>\n",
        "        <p>Pretoria AI</p>\n",
        "    </body>\n",
        "    </html>\n",
        "    \"\"\"\n",
        "    msg.add_alternative(html_content, subtype='html') # Use add_alternative for HTML content\n",
        "\n",
        "    with open(filename, \"rb\") as f:\n",
        "        data = f.read()\n",
        "    msg.add_attachment(data, maintype=\"application\", subtype=\"pdf\", filename=filename)\n",
        "\n",
        "    try:\n",
        "        with smtplib.SMTP_SSL(\"smtp.gmail.com\", 465) as smtp:\n",
        "            smtp.login(EMAIL_ADDRESS, EMAIL_APP_PASSWORD)\n",
        "            smtp.send_message(msg)\n",
        "    except Exception as e:\n",
        "        print(f\"❌ Error sending email to {to_email} for {client_name}: {e}\")\n",
        "        # Do not re-raise, just log the error\n",
        "\n",
        "import requests\n",
        "from googleapiclient.http import MediaFileUpload # Import MediaFileUpload here\n",
        "from fpdf import FPDF\n",
        "import os # Import os to check for file existence\n",
        "\n",
        "# Define prompt templates for different request types\n",
        "# The key of the dictionary should match the value in the 'Request type' column of your Google Sheet (case-insensitive).\n",
        "# The value is the prompt template string, using curly braces {} to insert values from the corresponding row in the sheet.\n",
        "prompt_templates = {\n",
        "    \"invoice\": \"\"\"\n",
        "Generate a professional invoice.\n",
        "\n",
        "**Instructions:**\n",
        "1.  **Recipient:** The invoice is for **{Full Name}**. If a business name is provided ({  Business Name (optional)  }), use it as the primary recipient.\n",
        "2.  **Invoice Details:**\n",
        "    *   Create a unique **Invoice Number** (e.g., INV-001).\n",
        "    *   Use today's date as the **Invoice Date**.\n",
        "    *   Set **Payment Due** to \"Due upon receipt\" unless specified otherwise.\n",
        "3.  **Line Items:**\n",
        "    *   Analyze the **Description & Notes**: \"{Description & Notes}\" to extract services/products, quantities, and prices.\n",
        "    *   List each item clearly with its description, quantity, unit price, and total price.\n",
        "4.  **Calculations:**\n",
        "    *   Calculate the **Subtotal** from the line items.\n",
        "    *   If the description mentions a **discount**, apply it to the subtotal. Clearly state the discount percentage or amount.\n",
        "    *   If the description mentions **VAT** or \"tax,\" calculate it (use 15% if not specified) on the post-discount subtotal.\n",
        "    *   Calculate the final **Total Amount Due**.\n",
        "5.  **Formatting:**\n",
        "    *   The output must be clean, well-structured, and professional.\n",
        "    *   **Do NOT include any placeholders like \"[Your Business Name]\" or \"[Client Address]\". Only use the information provided.**\n",
        "    *   If a price is not mentioned, state \"Amount Due: To be discussed\".\n",
        "\"\"\",\n",
        "    \"contract\": \"\"\"\n",
        "Generate a professional service agreement.\n",
        "\n",
        "**Instructions:**\n",
        "1.  **Parties:** The agreement is between **{Full Name}** (the \"Client\") and the service provider. If a business name is provided ({  Business Name (optional)  }), use it for the Client.\n",
        "2.  **Agreement Details:**\n",
        "    *   Use today's date as the **Effective Date**.\n",
        "    *   The subject of the contract is based on the **Description & Notes**: \"{Description & Notes}\".\n",
        "3.  **Clauses to Include:**\n",
        "    *   **Services:** Clearly define the scope of work, deliverables, and timelines based on the description.\n",
        "    *   **Compensation:** Specify the payment terms, rates, and total fees. If the description includes pricing (e.g., \"R7000 per month\"), use that. Otherwise, state that compensation is \"as agreed upon separately.\"\n",
        "    *   **Term and Termination:** Define the start date and duration of the contract. Include a clause for termination by either party with written notice.\n",
        "    *   **Confidentiality:** Include a standard confidentiality clause to protect sensitive information.\n",
        "    *   **Governing Law:** State that the agreement is governed by the laws of the relevant jurisdiction (e.g., South Africa).\n",
        "4.  **Formatting:**\n",
        "    *   The output must be a formal, well-structured legal document.\n",
        "    *   Use clear headings for each section (e.g., \"1. Services\", \"2. Compensation\").\n",
        "    *   **Do NOT include placeholders like \"[Your Company Name]\" or \"[Client Signature]\". The document should be ready for signature.**\n",
        "    *   Include signature lines for both the Client and the service provider.\n",
        "\"\"\"\n",
        "}\n",
        "\n",
        "\n",
        "# Define the local path for the DejaVuSans font file\n",
        "dejavu_font_local_path = 'DejaVuSans.ttf'\n",
        "font_download_successful = False # Flag to track font download status\n",
        "\n",
        "# Check if the font file exists locally, if not, download it\n",
        "if not os.path.exists(dejavu_font_local_path):\n",
        "    print(\"Attempting to download DejaVuSans.ttf...\")\n",
        "    font_url = 'http://dejavu-fonts.org/files/dejavu-fonts-ttf-2.37.zip' # URL to DejaVu fonts zip\n",
        "    zip_path = 'dejavu_fonts.zip'\n",
        "    # Download the zip file\n",
        "    try:\n",
        "        response = requests.get(font_url, stream=True)\n",
        "        response.raise_for_status()\n",
        "        with open(zip_path, 'wb') as f:\n",
        "            for chunk in response.iter_content(chunk_size=8192):\n",
        "                f.write(chunk)\n",
        "        print(\"Download complete. Extracting font file...\")\n",
        "\n",
        "        # Extract DejaVuSans.ttf from the zip\n",
        "        import zipfile\n",
        "        with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n",
        "            # Assuming the font is in a specific path within the zip, e.g., dejavu-fonts-ttf-2.37/ttf/DejaVuSans.ttf\n",
        "            # You might need to adjust this path based on the zip file's structure\n",
        "            font_in_zip_path = 'dejavu-fonts-ttf-2.37/ttf/DejaVuSans.ttf' # Common path within the zip\n",
        "            if font_in_zip_path in zip_ref.namelist():\n",
        "                zip_ref.extract(font_in_zip_path, '.') # Extract to the current directory\n",
        "                # Move the extracted file to the desired local path\n",
        "                extracted_font_path = os.path.join('.', font_in_zip_path)\n",
        "                os.rename(extracted_font_path, dejavu_font_local_path)\n",
        "                print(f\"✅ Successfully extracted and moved {dejavu_font_local_path}\")\n",
        "                font_download_successful = True\n",
        "            else:\n",
        "                 print(f\"❌ Error: '{font_in_zip_path}' not found within the zip file.\")\n",
        "                 dejavu_font_local_path = None # Set to None if extraction fails\n",
        "                 font_download_successful = False\n",
        "\n",
        "\n",
        "    except requests.exceptions.RequestException as e:\n",
        "        print(f\"❌ Error downloading font file: {e}\")\n",
        "        print(\"Please check the font URL or try manually uploading 'DejaVuSans.ttf' to your environment.\")\n",
        "        dejavu_font_local_path = None # Set to None if download fails\n",
        "        font_download_successful = False\n",
        "    except zipfile.BadZipFile:\n",
        "        print(\"❌ Error: Downloaded file is not a valid zip file.\")\n",
        "        dejavu_font_local_path = None\n",
        "        font_download_successful = False\n",
        "    except Exception as e:\n",
        "        print(f\"❌ An unexpected error occurred during font setup: {e}\")\n",
        "        dejavu_font_local_path = None\n",
        "        font_download_successful = False\n",
        "else:\n",
        "    # Font file already exists locally\n",
        "    font_download_successful = True\n",
        "\n",
        "\n",
        "# Main process\n",
        "headers = {\"Authorization\": f\"Bearer {OPENROUTER_API_KEY}\"}\n",
        "for row in data:\n",
        "    client_name = row.get('Full Name', 'Unknown Client') # Default to 'Unknown Client' if name is missing\n",
        "    email = row.get(\"Client's Email\") or row.get(\"Email\")\n",
        "    if not email:\n",
        "        print(f\"Skipping processing for {client_name}: No email address provided in the Google Sheet.\")\n",
        "        continue\n",
        "\n",
        "    request_type = row.get('Request type', '').lower() # Get request type and convert to lowercase\n",
        "    prompt_template = prompt_templates.get(request_type) # Get the template for the request type\n",
        "\n",
        "    if prompt_template:\n",
        "        # Format the prompt using the template and row data\n",
        "        try:\n",
        "            prompt = prompt_template.format(**row)\n",
        "        except KeyError as e:\n",
        "            print(f\"❌ Skipping processing for {client_name}: Missing required data in the Google Sheet for the '{request_type}' template. Missing key: {e}\")\n",
        "            continue\n",
        "    else:\n",
        "        # Use a default prompt if no template is found\n",
        "        print(f\"ℹ️ No specific prompt template found for request type: '{row.get('Request type')}' for client {client_name}. Using a default prompt based on Description & Notes.\")\n",
        "        prompt = f\"Generate a document for {client_name}:\\n{row.get('Description & Notes', 'No description provided.')}\" # Default description if missing\n",
        "\n",
        "    # Print the prompt being sent to the API for debugging\n",
        "    print(f\"Prompt being sent to API for {client_name}: {prompt}\")\n",
        "\n",
        "    payload = {\"model\":\"mistralai/mistral-7b-instruct\", \"messages\":[{\"role\":\"user\",\"content\":prompt}]}\n",
        "\n",
        "    try:\n",
        "        resp = requests.post(\"https://openrouter.ai/api/v1/chat/completions\", headers=headers, json=payload)\n",
        "        resp.raise_for_status() # Raise an HTTPError for bad responses (4xx or 5xx)\n",
        "\n",
        "        # Print the full API response for debugging\n",
        "        # print(\"Full OpenRouter API Response:\") # Commented out to reduce noise, uncomment for detailed debugging\n",
        "        # print(resp.json())\n",
        "        # print(\"-\" * 20) # Separator for clarity\n",
        "\n",
        "\n",
        "        text = resp.json()[\"choices\"][0][\"message\"][\"content\"]\n",
        "\n",
        "        pdf = FPDF()\n",
        "        # Check if the font is available before attempting to add it\n",
        "        if font_download_successful and dejavu_font_local_path and os.path.exists(dejavu_font_local_path):\n",
        "            try:\n",
        "                pdf.add_font('DejaVuSans', '', dejavu_font_local_path, uni=True)\n",
        "                pdf.set_font(\"DejaVuSans\", size=12) # Set font only if found\n",
        "                print(f\"✅ Using DejaVuSans font for {client_name}'s PDF.\")\n",
        "            except Exception as font_error:\n",
        "                print(f\"❌ Error adding DejaVuSans font for {client_name}: {font_error}. Falling back to default font.\")\n",
        "                pdf.set_font(\"Arial\", size=12) # Fallback to Arial if DejaVuSans fails\n",
        "                # Attempt to handle potential encoding issues by replacing unsupported characters\n",
        "                text = text.encode('latin-1', 'replace').decode('latin-1')\n",
        "        else:\n",
        "            print(f\"⚠️ DejaVuSans font file not found or could not be loaded for {client_name}. Using default font. Unicode characters may not render correctly.\")\n",
        "            pdf.set_font(\"Arial\", size=12) # Fallback to Arial if DejaVuSans not found or unavailable\n",
        "            # Attempt to handle potential encoding issues by replacing unsupported characters\n",
        "            text = text.encode('latin-1', 'replace').decode('latin-1')\n",
        "\n",
        "\n",
        "        pdf.add_page()\n",
        "        # Add the entire text block as a single multi_cell\n",
        "        pdf.multi_cell(190, 8, text)\n",
        "        fname = f\"{client_name.replace(' ','_')}_{request_type}.pdf\"\n",
        "        pdf.output(fname)\n",
        "\n",
        "        # Use google-api-python-client to upload the file\n",
        "        file_metadata = {\n",
        "            'name': fname,\n",
        "            'parents': [TARGET_FOLDER_ID]\n",
        "        }\n",
        "        media = MediaFileUpload(fname, mimetype='application/pdf')\n",
        "        # Use the 'drive' object authenticated in cell 4d328115\n",
        "        file = drive.files().create(body=file_metadata, media_body=media, fields='id').execute()\n",
        "        print(f\"✅ Uploaded file '{fname}' to Google Drive with ID: {file.get('id')}\")\n",
        "\n",
        "\n",
        "        send_email_pdf(email, client_name, fname)\n",
        "        print(f\"✅ Processed & emailed: {client_name}\")\n",
        "\n",
        "    except requests.exceptions.RequestException as e:\n",
        "        print(f\"❌ Error calling OpenRouter API for {client_name}: {e}\")\n",
        "        print(\"Please check your API key, network connection, or the OpenRouter service status.\")\n",
        "        if hasattr(e, 'response') and e.response is not None:\n",
        "            print(f\"API Response status code: {e.response.status_code}\")\n",
        "            print(f\"API Response body: {e.response.text}\")\n",
        "        continue # Continue to the next row if there's an API error\n",
        "\n",
        "    except KeyError as e:\n",
        "        print(f\"❌ Error processing API response for {client_name}: The API response structure was unexpected. Missing key: {e}\")\n",
        "        print(\"This might be an issue with how the response is being parsed. Please check the API response structure.\")\n",
        "        # The full response is already printed above (if not commented out), which should help diagnose this KeyError\n",
        "        continue # Continue to the next row if there's a KeyError in processing the response\n",
        "    except Exception as e:\n",
        "        print(f\"❌ An unexpected error occurred while processing data for {client_name}: {e}\")\n",
        "        print(\"Please review the data for this row or the processing logic.\")\n",
        "        continue # Continue to the next row for any other unexpected error"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Successfully read 3 rows from the Google Sheet.\n",
            "Attempting to download DejaVuSans.ttf...\n",
            "❌ Error downloading font file: 403 Client Error: Forbidden for url: http://dejavu-fonts.org/files/dejavu-fonts-ttf-2.37.zip\n",
            "Please check the font URL or try manually uploading 'DejaVuSans.ttf' to your environment.\n",
            "Prompt being sent to API for john Doe: \n",
            "Generate a professional invoice.\n",
            "\n",
            "**Instructions:**\n",
            "1.  **Recipient:** The invoice is for **john Doe**. If a business name is provided (laza effect), use it as the primary recipient.\n",
            "2.  **Invoice Details:**\n",
            "    *   Create a unique **Invoice Number** (e.g., INV-001).\n",
            "    *   Use today's date as the **Invoice Date**.\n",
            "    *   Set **Payment Due** to \"Due upon receipt\" unless specified otherwise.\n",
            "3.  **Line Items:**\n",
            "    *   Analyze the **Description & Notes**: \"logo R800\" to extract services/products, quantities, and prices.\n",
            "    *   List each item clearly with its description, quantity, unit price, and total price.\n",
            "4.  **Calculations:**\n",
            "    *   Calculate the **Subtotal** from the line items.\n",
            "    *   If the description mentions a **discount**, apply it to the subtotal. Clearly state the discount percentage or amount.\n",
            "    *   If the description mentions **VAT** or \"tax,\" calculate it (use 15% if not specified) on the post-discount subtotal.\n",
            "    *   Calculate the final **Total Amount Due**.\n",
            "5.  **Formatting:**\n",
            "    *   The output must be clean, well-structured, and professional.\n",
            "    *   **Do NOT include any placeholders like \"[Your Business Name]\" or \"[Client Address]\". Only use the information provided.**\n",
            "    *   If a price is not mentioned, state \"Amount Due: To be discussed\".\n",
            "\n",
            "⚠️ DejaVuSans font file not found or could not be loaded for john Doe. Using default font. Unicode characters may not render correctly.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-874686201.py:223: DeprecationWarning: Substituting font arial by core font helvetica - This is deprecated since v2.7.8, and will soon be removed\n",
            "  pdf.set_font(\"Arial\", size=12) # Fallback to Arial if DejaVuSans not found or unavailable\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Uploaded file 'john_Doe_invoice.pdf' to Google Drive with ID: 14JufuC_uwz0PvWZpy8Yo1ESMkrOdWfsz\n",
            "✅ Processed & emailed: john Doe\n",
            "Prompt being sent to API for frans Letwaba: \n",
            "Generate a professional service agreement.\n",
            "\n",
            "**Instructions:**\n",
            "1.  **Parties:** The agreement is between **frans Letwaba** (the \"Client\") and the service provider. If a business name is provided (Academy city), use it for the Client.\n",
            "2.  **Agreement Details:**\n",
            "    *   Use today's date as the **Effective Date**.\n",
            "    *   The subject of the contract is based on the **Description & Notes**: \"contract to show that i lucky Hlongoane will teach 10 learners per month for R7000 per month for Academy City\".\n",
            "3.  **Clauses to Include:**\n",
            "    *   **Services:** Clearly define the scope of work, deliverables, and timelines based on the description.\n",
            "    *   **Compensation:** Specify the payment terms, rates, and total fees. If the description includes pricing (e.g., \"R7000 per month\"), use that. Otherwise, state that compensation is \"as agreed upon separately.\"\n",
            "    *   **Term and Termination:** Define the start date and duration of the contract. Include a clause for termination by either party with written notice.\n",
            "    *   **Confidentiality:** Include a standard confidentiality clause to protect sensitive information.\n",
            "    *   **Governing Law:** State that the agreement is governed by the laws of the relevant jurisdiction (e.g., South Africa).\n",
            "4.  **Formatting:**\n",
            "    *   The output must be a formal, well-structured legal document.\n",
            "    *   Use clear headings for each section (e.g., \"1. Services\", \"2. Compensation\").\n",
            "    *   **Do NOT include placeholders like \"[Your Company Name]\" or \"[Client Signature]\". The document should be ready for signature.**\n",
            "    *   Include signature lines for both the Client and the service provider.\n",
            "\n",
            "⚠️ DejaVuSans font file not found or could not be loaded for frans Letwaba. Using default font. Unicode characters may not render correctly.\n",
            "✅ Uploaded file 'frans_Letwaba_contract.pdf' to Google Drive with ID: 1DKazYEtAptWhPddalw_U1fDp5JfITwT9\n",
            "✅ Processed & emailed: frans Letwaba\n",
            "Prompt being sent to API for Khwinana Joseph: \n",
            "Generate a professional invoice.\n",
            "\n",
            "**Instructions:**\n",
            "1.  **Recipient:** The invoice is for **Khwinana Joseph**. If a business name is provided (Dutoit Store), use it as the primary recipient.\n",
            "2.  **Invoice Details:**\n",
            "    *   Create a unique **Invoice Number** (e.g., INV-001).\n",
            "    *   Use today's date as the **Invoice Date**.\n",
            "    *   Set **Payment Due** to \"Due upon receipt\" unless specified otherwise.\n",
            "3.  **Line Items:**\n",
            "    *   Analyze the **Description & Notes**: \"Generate invoice to Dutoit store since i have provided them with 10 computers one costing R1500 AND Provide them with 10% discount ,vat inclusive.\" to extract services/products, quantities, and prices.\n",
            "    *   List each item clearly with its description, quantity, unit price, and total price.\n",
            "4.  **Calculations:**\n",
            "    *   Calculate the **Subtotal** from the line items.\n",
            "    *   If the description mentions a **discount**, apply it to the subtotal. Clearly state the discount percentage or amount.\n",
            "    *   If the description mentions **VAT** or \"tax,\" calculate it (use 15% if not specified) on the post-discount subtotal.\n",
            "    *   Calculate the final **Total Amount Due**.\n",
            "5.  **Formatting:**\n",
            "    *   The output must be clean, well-structured, and professional.\n",
            "    *   **Do NOT include any placeholders like \"[Your Business Name]\" or \"[Client Address]\". Only use the information provided.**\n",
            "    *   If a price is not mentioned, state \"Amount Due: To be discussed\".\n",
            "\n",
            "⚠️ DejaVuSans font file not found or could not be loaded for Khwinana Joseph. Using default font. Unicode characters may not render correctly.\n",
            "✅ Uploaded file 'Khwinana_Joseph_invoice.pdf' to Google Drive with ID: 1H49y-piTbEJw06nR3NIH2ejlrkkEzKSS\n",
            "✅ Processed & emailed: Khwinana Joseph\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "c29c9ace"
      },
      "source": [
        "## Summary:\n",
        "\n",
        "### Data Analysis Key Findings\n",
        "\n",
        "*   The original code lacked specific error handling for potential issues like API call failures, missing data, or font loading problems.\n",
        "*   The font download process for `DejaVuSans.ttf` encountered a 403 Forbidden error, preventing the custom font from being used.\n",
        "*   Without improved error handling, a single error during processing could stop the entire operation.\n",
        "\n",
        "### Insights or Next Steps\n",
        "\n",
        "*   Implement more specific error handling for various potential failures (API errors, data errors, font errors) to make the application more robust.\n",
        "*   Gracefully handle font loading failures by falling back to a default font (like Arial) and informing the user.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "160b0db9"
      },
      "source": [
        "# How to Use the Document Agent\n",
        "\n",
        "This document agent helps small businesses automate the generation of professional documents like invoices and contracts using AI. You provide the client details and document requirements, and the agent generates and emails the document as a PDF.\n",
        "\n",
        "## Setup Requirements\n",
        "\n",
        "To use the Document Agent, you will need:\n",
        "\n",
        "1.  **A Google Account:** Required for Google Sheets and Gmail.\n",
        "2.  **An OpenRouter API Key:** Used to access the AI model that generates the document content. You can obtain one from the [OpenRouter website](https://openrouter.ai/). Keep this key secure.\n",
        "3.  **A Gmail Account with App Password:** Used to send the generated PDF documents via email. You will need to enable 2-factor authentication on your Gmail account and generate an [App Password](https://support.google.com/accounts/answer/185833) to use instead of your regular password.\n",
        "4.  **A Unicode Font File (e.g., DejaVuSans.ttf):** Required for generating PDFs with special characters. You may need to manually upload this file to your environment (like Google Colab or your application's deployment environment) if it's not available by default.\n",
        "\n",
        "## Preparing Your Google Sheet (for the Colab version)\n",
        "\n",
        "If you are using the Google Sheet-based version (like the original Colab notebook), your Google Sheet needs specific columns for the agent to read the necessary information.\n",
        "\n",
        "Create a new Google Sheet and ensure the first row (headers) includes the following columns exactly as written:\n",
        "\n",
        "*   **Full Name:** The full name of the client or recipient.\n",
        "*   **Client's Email:** The email address where the generated document should be sent.\n",
        "*   **Request type:** The type of document you want to generate (e.g., `invoice`, `contract`). This is case-insensitive.\n",
        "*   **Description & Notes:** A detailed description of the services, products, or terms to be included in the document. This is the core information the AI uses to generate the document content.\n",
        "*   **Business Name (optional):** The client's business name, if applicable.\n",
        "\n",
        "You can include other columns for your own tracking, but the agent will primarily use the columns listed above for document generation based on the prompt templates.\n",
        "\n",
        "For each document you want to generate, add a new row to the sheet and fill in the details:\n",
        "\n",
        "*   **Invoice:** In 'Description & Notes', include details like the services provided, quantities, unit prices, any discounts, and whether VAT is applicable.\n",
        "*   **Contract:** In 'Description & Notes', outline the scope of work, agreed-upon compensation terms, duration, and any specific clauses you need included.\n",
        "\n",
        "## Using the Streamlit Web App (if deployed)\n",
        "\n",
        "If you are using the Streamlit web app version, you will interact with a simple web form instead of a Google Sheet for input.\n",
        "\n",
        "1.  Access the web app URL provided to you.\n",
        "2.  Fill in the required fields on the form:\n",
        "    *   Client's Full Name\n",
        "    *   Client's Email Address\n",
        "    *   Select the Document Type (Invoice or Contract)\n",
        "    *   Provide a detailed Description & Notes, similar to how you would for the Google Sheet version.\n",
        "    *   Optionally, include the Business Name.\n",
        "3.  Click the \"Generate & Email Document\" button.\n",
        "4.  The agent will process your request using the AI, generate a PDF, and email it to the email address you provided.\n",
        "\n",
        "## Important Notes and Troubleshooting\n",
        "\n",
        "*   **Document Complexity:** The AI works best with clear and specific instructions in the 'Description & Notes' field. Highly complex or ambiguous requests may result in less accurate documents.\n",
        "*   **Formatting:** While the agent attempts professional formatting, review the generated PDF for any minor formatting issues, especially with complex descriptions or special characters. Using a Unicode font like DejaVuSans is crucial for character support.\n",
        "*   **Email Delivery:** Check your spam or junk folder if you don't receive the email within a few minutes. Ensure the sender email address ({{EMAIL_ADDRESS}}) is added to your contacts or safe sender list.\n",
        "*   **API Limits:** Be mindful of the usage limits of your OpenRouter API key, especially on free tiers.\n",
        "*   **Data Accuracy:** The accuracy of the generated document depends entirely on the information you provide in the input (Google Sheet row or web form). Double-check your inputs before generating.\n",
        "*   **Security:** Keep your API keys and email app password secure. If you are hosting a web app, use secure methods (like Streamlit's secrets management) to store credentials instead of hardcoding them.\n",
        "\n",
        "For any issues not covered here, please refer to the source code or contact the developer.\n",
        "\"\"\".format(EMAIL_ADDRESS=\"{{EMAIL_ADDRESS}}\") # Use a placeholder here since the variable is in a different cell"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "84c7e19b"
      },
      "source": [
        "## Summary:\n",
        "\n",
        "### Data Analysis Key Findings\n",
        "\n",
        "*   The Document Agent can process data from a Google Sheet to generate documents (invoices and contracts) using an AI model via the OpenRouter API.\n",
        "*   Generated documents are created as PDFs using the `fpdf2` library.\n",
        "*   The agent can upload the generated PDFs to a specified Google Drive folder.\n",
        "*   The agent can email the generated PDFs to the client's email address using Gmail SMTP.\n",
        "*   Using a Unicode font like DejaVuSans is crucial for supporting various characters in the PDF, and manual uploading might be necessary if automatic download fails.\n",
        "*   Initial error handling was basic and has been improved to provide more specific feedback for issues like API errors, missing data, and font problems.\n",
        "*   The application has been structured with a Streamlit web app in mind, including separate files (`app.py`, `requirements.txt`) and considerations for deployment.\n",
        "\n",
        "### Insights or Next Steps\n",
        "\n",
        "*   **Insight:** Hardcoding API keys and email credentials in the script is a security risk, especially for deployment.\n",
        "*   **Next Step:** Implement secure secrets management (e.g., Streamlit's `st.secrets` for the web app, environment variables for other deployments) to protect sensitive information.\n",
        "*   **Insight:** The prompt templates, while improved, could be further refined for more complex document types or to handle more nuanced instructions from the 'Description & Notes' field.\n",
        "*   **Next Step:** Continuously refine and expand the prompt templates based on user feedback and observed AI output quality for different document types and descriptions.\n",
        "*   **Insight:** The current Streamlit app is a basic interface.\n",
        "*   **Next Step:** Enhance the Streamlit app with features like input validation, progress indicators, the ability to preview the generated text before PDF creation, and better styling.\n",
        "*   **Insight:** The font download issue highlights a dependency that can fail.\n",
        "*   **Next Step:** Provide clearer instructions in the documentation about the necessity of the font file and how to ensure it's available in different environments (manual upload for Colab, including in repo for Streamlit Cloud).\n",
        "*   **Insight:** Error reporting could be more centralized or logged for easier debugging in a deployed environment.\n",
        "*   **Next Step:** Implement a more robust logging mechanism to capture detailed error information during processing."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "b825698b"
      },
      "source": [
        "# Document Agent for Small Businesses\n",
        "\n",
        "## Overview\n",
        "\n",
        "This project provides a Python-based Document Agent designed to help small businesses automate the generation of professional documents like invoices and contracts using AI. By providing client details and document requirements, the agent generates and emails the document as a PDF. The agent can be run as a Python script (e.g., in Google Colab) or deployed as a user-friendly web application using Streamlit.\n",
        "\n",
        "## Features\n",
        "\n",
        "*   Generate invoices and contracts from structured data (e.g., Google Sheet).\n",
        "*   Utilize an AI model (via OpenRouter API) for flexible document content generation based on descriptions.\n",
        "*   Create professional PDF documents using `fpdf2`.\n",
        "*   Upload generated PDFs to Google Drive.\n",
        "*   Email generated PDFs to clients using Gmail SMTP.\n",
        "*   Includes a basic Streamlit web application interface for easier use by non-technical users.\n",
        "*   Enhanced error handling for better reliability.\n",
        "\n",
        "## Setup Requirements\n",
        "\n",
        "To run this Document Agent, you will need:\n",
        "\n",
        "1.  **A Google Account:** Required for Google Sheets (if using the Colab version) and Gmail.\n",
        "2.  **An OpenRouter API Key:** Used to access the AI model. Obtain one from the [OpenRouter website](https://openrouter.ai/).\n",
        "3.  **A Gmail Account with App Password:** Used to send emails. Enable 2-factor authentication on your Gmail account and generate an [App Password](https://support.google.com/accounts/answer/185833) to use instead of your regular password.\n",
        "4.  **A Unicode Font File (e.g., DejaVuSans.ttf):** Required for generating PDFs with special characters. You may need to manually include this file in your environment or repository.\n",
        "\n",
        "## Installation\n",
        "\n",
        "1.  **Clone the Repository:**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "954c12c7",
        "outputId": "236035fc-df3f-477f-834f-2e3dad140a19"
      },
      "source": [
        "    pip install -r requirements.txt"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting streamlit (from -r requirements.txt (line 1))\n",
            "  Downloading streamlit-1.48.0-py3-none-any.whl.metadata (9.5 kB)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from -r requirements.txt (line 2)) (2.32.3)\n",
            "Requirement already satisfied: gspread in /usr/local/lib/python3.11/dist-packages (from -r requirements.txt (line 3)) (6.2.1)\n",
            "Requirement already satisfied: fpdf2 in /usr/local/lib/python3.11/dist-packages (from -r requirements.txt (line 4)) (2.8.3)\n",
            "Requirement already satisfied: oauth2client in /usr/local/lib/python3.11/dist-packages (from -r requirements.txt (line 5)) (4.1.3)\n",
            "Requirement already satisfied: altair!=5.4.0,!=5.4.1,<6,>=4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit->-r requirements.txt (line 1)) (5.5.0)\n",
            "Requirement already satisfied: blinker<2,>=1.5.0 in /usr/local/lib/python3.11/dist-packages (from streamlit->-r requirements.txt (line 1)) (1.9.0)\n",
            "Requirement already satisfied: cachetools<7,>=4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit->-r requirements.txt (line 1)) (5.5.2)\n",
            "Requirement already satisfied: click<9,>=7.0 in /usr/local/lib/python3.11/dist-packages (from streamlit->-r requirements.txt (line 1)) (8.2.1)\n",
            "Requirement already satisfied: numpy<3,>=1.23 in /usr/local/lib/python3.11/dist-packages (from streamlit->-r requirements.txt (line 1)) (2.0.2)\n",
            "Requirement already satisfied: packaging<26,>=20 in /usr/local/lib/python3.11/dist-packages (from streamlit->-r requirements.txt (line 1)) (25.0)\n",
            "Requirement already satisfied: pandas<3,>=1.4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit->-r requirements.txt (line 1)) (2.2.2)\n",
            "Requirement already satisfied: pillow<12,>=7.1.0 in /usr/local/lib/python3.11/dist-packages (from streamlit->-r requirements.txt (line 1)) (11.3.0)\n",
            "Requirement already satisfied: protobuf<7,>=3.20 in /usr/local/lib/python3.11/dist-packages (from streamlit->-r requirements.txt (line 1)) (5.29.5)\n",
            "Requirement already satisfied: pyarrow>=7.0 in /usr/local/lib/python3.11/dist-packages (from streamlit->-r requirements.txt (line 1)) (18.1.0)\n",
            "Requirement already satisfied: tenacity<10,>=8.1.0 in /usr/local/lib/python3.11/dist-packages (from streamlit->-r requirements.txt (line 1)) (8.5.0)\n",
            "Requirement already satisfied: toml<2,>=0.10.1 in /usr/local/lib/python3.11/dist-packages (from streamlit->-r requirements.txt (line 1)) (0.10.2)\n",
            "Requirement already satisfied: typing-extensions<5,>=4.4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit->-r requirements.txt (line 1)) (4.14.1)\n",
            "Collecting watchdog<7,>=2.1.5 (from streamlit->-r requirements.txt (line 1))\n",
            "  Downloading watchdog-6.0.0-py3-none-manylinux2014_x86_64.whl.metadata (44 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m44.3/44.3 kB\u001b[0m \u001b[31m361.0 kB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: gitpython!=3.1.19,<4,>=3.0.7 in /usr/local/lib/python3.11/dist-packages (from streamlit->-r requirements.txt (line 1)) (3.1.45)\n",
            "Collecting pydeck<1,>=0.8.0b4 (from streamlit->-r requirements.txt (line 1))\n",
            "  Downloading pydeck-0.9.1-py2.py3-none-any.whl.metadata (4.1 kB)\n",
            "Requirement already satisfied: tornado!=6.5.0,<7,>=6.0.3 in /usr/local/lib/python3.11/dist-packages (from streamlit->-r requirements.txt (line 1)) (6.4.2)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->-r requirements.txt (line 2)) (3.4.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->-r requirements.txt (line 2)) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->-r requirements.txt (line 2)) (2.5.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->-r requirements.txt (line 2)) (2025.8.3)\n",
            "Requirement already satisfied: google-auth>=1.12.0 in /usr/local/lib/python3.11/dist-packages (from gspread->-r requirements.txt (line 3)) (2.38.0)\n",
            "Requirement already satisfied: google-auth-oauthlib>=0.4.1 in /usr/local/lib/python3.11/dist-packages (from gspread->-r requirements.txt (line 3)) (1.2.2)\n",
            "Requirement already satisfied: defusedxml in /usr/local/lib/python3.11/dist-packages (from fpdf2->-r requirements.txt (line 4)) (0.7.1)\n",
            "Requirement already satisfied: fonttools>=4.34.0 in /usr/local/lib/python3.11/dist-packages (from fpdf2->-r requirements.txt (line 4)) (4.59.0)\n",
            "Requirement already satisfied: httplib2>=0.9.1 in /usr/local/lib/python3.11/dist-packages (from oauth2client->-r requirements.txt (line 5)) (0.22.0)\n",
            "Requirement already satisfied: pyasn1>=0.1.7 in /usr/local/lib/python3.11/dist-packages (from oauth2client->-r requirements.txt (line 5)) (0.6.1)\n",
            "Requirement already satisfied: pyasn1-modules>=0.0.5 in /usr/local/lib/python3.11/dist-packages (from oauth2client->-r requirements.txt (line 5)) (0.4.2)\n",
            "Requirement already satisfied: rsa>=3.1.4 in /usr/local/lib/python3.11/dist-packages (from oauth2client->-r requirements.txt (line 5)) (4.9.1)\n",
            "Requirement already satisfied: six>=1.6.1 in /usr/local/lib/python3.11/dist-packages (from oauth2client->-r requirements.txt (line 5)) (1.17.0)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit->-r requirements.txt (line 1)) (3.1.6)\n",
            "Requirement already satisfied: jsonschema>=3.0 in /usr/local/lib/python3.11/dist-packages (from altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit->-r requirements.txt (line 1)) (4.25.0)\n",
            "Requirement already satisfied: narwhals>=1.14.2 in /usr/local/lib/python3.11/dist-packages (from altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit->-r requirements.txt (line 1)) (2.0.1)\n",
            "Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.11/dist-packages (from gitpython!=3.1.19,<4,>=3.0.7->streamlit->-r requirements.txt (line 1)) (4.0.12)\n",
            "Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.11/dist-packages (from google-auth-oauthlib>=0.4.1->gspread->-r requirements.txt (line 3)) (2.0.0)\n",
            "Requirement already satisfied: pyparsing!=3.0.0,!=3.0.1,!=3.0.2,!=3.0.3,<4,>=2.4.2 in /usr/local/lib/python3.11/dist-packages (from httplib2>=0.9.1->oauth2client->-r requirements.txt (line 5)) (3.2.3)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit->-r requirements.txt (line 1)) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit->-r requirements.txt (line 1)) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit->-r requirements.txt (line 1)) (2025.2)\n",
            "Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.11/dist-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3.0.7->streamlit->-r requirements.txt (line 1)) (5.0.2)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit->-r requirements.txt (line 1)) (3.0.2)\n",
            "Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit->-r requirements.txt (line 1)) (25.3.0)\n",
            "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit->-r requirements.txt (line 1)) (2025.4.1)\n",
            "Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit->-r requirements.txt (line 1)) (0.36.2)\n",
            "Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit->-r requirements.txt (line 1)) (0.26.0)\n",
            "Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.11/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib>=0.4.1->gspread->-r requirements.txt (line 3)) (3.3.1)\n",
            "Downloading streamlit-1.48.0-py3-none-any.whl (9.9 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m9.9/9.9 MB\u001b[0m \u001b[31m15.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading pydeck-0.9.1-py2.py3-none-any.whl (6.9 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.9/6.9 MB\u001b[0m \u001b[31m34.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading watchdog-6.0.0-py3-none-manylinux2014_x86_64.whl (79 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m79.1/79.1 kB\u001b[0m \u001b[31m6.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: watchdog, pydeck, streamlit\n",
            "Successfully installed pydeck-0.9.1 streamlit-1.48.0 watchdog-6.0.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 106
        },
        "id": "9bc060f4",
        "outputId": "13d9725a-7c7f-4f40-f82b-42e5a3fcd6b4"
      },
      "source": [
        "    streamlit run app.py"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "invalid syntax (ipython-input-2447659204.py, line 1)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"/tmp/ipython-input-2447659204.py\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    streamlit run app.py\u001b[0m\n\u001b[0m              ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ]
    }
  ]
}